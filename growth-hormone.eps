%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 382.000000 472.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 96 118
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 96 118
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue-Light
%!FontType1-1.0: HelveticaNeue-Light 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Light def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /E put
dup 34 /m put
dup 35 /e put
dup 36 /r put
dup 37 /g put
dup 38 /n put
dup 39 /c put
dup 40 /y put
dup 41 /space put
dup 42 /T put
dup 43 /x put
dup 44 /S put
dup 45 /o put
dup 46 /f put
dup 47 /A put
dup 48 /a put
dup 49 /l put
dup 50 /M put
dup 51 /s put
dup 52 /u put
dup 53 /I put
dup 54 /G put
dup 55 /F put
dup 56 /hyphen put
dup 57 /one put
dup 58 /v put
dup 59 /t put
dup 60 /d put
dup 61 /w put
dup 62 /h put
dup 63 /H put
dup 64 /p put
dup 65 /i put
dup 66 /R put
dup 67 /parenleft put
dup 68 /parenright put
dup 69 /P put
dup 70 /O put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -430 1 index div -305 2 index div 1987 3 index div 1163 5 -1 roll div]cvx def
/sfnts [<









00>] def
/CharStrings 40 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/hyphen 4 def
/one 5 def
/A 6 def
/E 7 def
/F 8 def
/G 9 def
/H 10 def
/I 11 def
/M 12 def
/O 13 def
/P 14 def
/R 15 def
/S 16 def
/T 17 def
/a 18 def
/c 19 def
/d 20 def
/e 21 def
/f 22 def
/g 23 def
/h 24 def
/i 25 def
/l 26 def
/m 27 def
/n 28 def
/o 29 def
/p 30 def
/r 31 def
/s 32 def
/t 33 def
/u 34 def
/v 35 def
/w 36 def
/x 37 def
/y 38 def
/A.short01 39 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-430 -305 1987 1163}def
/UniqueID 4428012 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94DF6C6C4CAA4D4724D5FBE8DE875B8787096CC4B940CDD1EB776B4874E0C7FF83936FF37FA0D42E42B0F1AD1182445EC1172B7E737A1B1E686F18892DAF90546E38B0B9C31280FBA5E78DA7174F36E2F406041108FE78F4A8786542EC48A1C95829B04D85A09E02D7E4BCCB056844B047F1EB02EC8551410AD73645A769B84385E7F803288F6B4BB32FFE69BCC45F02AF14E2C71C1E48ADDFF3D81F033C48C7E702BB23208494D60308F6CFD5E7206C7BA96E8D751F7129E7B778A840BB4871492333061B179031E4168525A9698E666A52D6C32E083678063D9CA3063BA9E81E05EE0569F9AEDD5E929BE915299ACA95CA7709E014F8437710CE6B30F113850587A32AED8F078BBC6AC04066369509520C18C34012E523FFB6A07FFC5B20EF0F9153EBAD93CDEA56F4DFD6817F2EFBD14080F911A09904AEAB4CA3932F9299829656B0346803BCDFA430BC1913F2170602E7050CA4750CC538114EA509D225752F3B333BC462841B57BA816619AC3CC0D5263E5AF4CA0B677221E250D3AB65428ACBEF80A9F9F2F9FBDE3D7B31B6DE6325CD92F50BD7446DCF85431E31E034DDB1A79E0123194C27CB47D478605D08F4F90D7471E38A114E2910515E836AA7AB936B747D64CA6768C2234D6BDFCF0AD2516EC36D60F1173DBDB58BEB1667C3F97FF071129EADAA7715733F9FFD1C501E80684CD8FEEC2FAF53B96664CEB08903226B384F1A063B7B04C3CFC25BBD965C3F64B839E11BBFC9D2AD3E1BA62C442B
EDBD0F0EF55E26A7257509B3E1FFC641EFA2DEF4D0A24977E29A095623A4C55F06935532F07BF54947C3B5B4104CB8011D21CD4306EF5359B2B228BFA9428DF9BEB169B8C72A9A7BBA96080671734AE62958D4221D3B691BFBD894651A1B20ABA759BA54A1082F06F52DBCF946CE8D1041E6E91523F039823C352EA9ECCEC142A69C3C4D1181171512317885F9932F12E5AEDD44D4F020AF739DAE28B476F28944C0EBF621A3BD10DDDA70F8612F86E82D1A60500357CFB4615A98CB1F6CC1241CA983166CF46A2B9673E0499FC001790FE97604380E852008EB978CB77FC5D357D1299B52E4CB5D8D47305E74181E88BC5BA8257284C075C660A7FA96234435EF3B573526798DCC215321EEF76EBC3BD5E29B233E60E772B1F6E112CF8F8E79437A3103AE29FF252F27CD3DE972C719ED278A501092539FBA8E9CDC120806396E6FD3C729B20EA0680C8D8E51046BED2DC202B756D7483D2CC4EE696DFE1CCBD328360F8AF103C651D5A1D0F8928BF2B0A0B2E6572D3C8268EB18BA4DBA3E0D5FE794119A5AF698F1CB259B4F149E98ACA5D50133F0E2C3CE92266376B9C27C0BB4298E712D51EDA9F9959068E169CB6E40EC40226405EABC37D8640E7DF793409B79A86F9FF09CEA24793061AF35F805413C10B5E27B38A0A43249AD390DDFCC7BC2772D08BED50AC3CEB388AD49BF351CFAB9AF46F2504A5FDEE812B79AF593E540A9C849E8F5E0505B369DA89276E5FB3603151C48458E377F5D469C28E3E8EC640E8C6537DD16808A9E430E889002014B23FD879253A51ECFC925FC2612BA3447021C8A2662AB13940CCC54E06D2516E84C8C676E950B37172F9B4EF50D8FFE9D0A2BE52A1EFEB61475E2D63E4E84E987501D5BB79323A35124EA7E0E38E5DE97C07FFCC5121C57C4EB650FC737B8B521AB5A2B3B562C83D9B1573C7F26CB5E34EEF50076BE4604A1ACD11629E8B2FB0FE6150D15ECE35221D3DC4910DADE6E3B859AA4D8591A195B1A1ED7D902ADE7286D0CC3485B5059F8B058EB37E9401B6032CF5AE71D28B570A4B8CFC767AC23EA9B42E5B6E0B63C5355D8B88AB2BAA1FF17095ABF376D47DA85A5F91C1B8E6F087814BA2468EEAAD03B1214378539AE7536B679F36D3B34E433CCAE5B9BECD82FB5F58C431305F5BB1023740676F4AB241E9CE63FC20291BF33EBEA45E589FD61FDD379C639A3D466112E127271F39A9860786ADC598B7C36D1D26A266CD12C2AF8C15C151C77B6E522C1D77274DABC5BD2846049F3D6DB4BC7DDB94409F181A8CFC0EDA2EE9451F3F8A2E2A1AA4B43505DF2657985D7A4F459A2617F1DBEF5C2952193967BAEF8689486358FF2400884FA7D6743856DFE0DB9DA3EC085D4B66D8745A09B9E805E44EFE923F5139F383341EF6F4D56309D18854A8276131E5E6EDB9B5C3D0F29790080D465E7AD
C07C4BAEA560C7CCE644090A246ED71BC50751A4C01978BD895E1ADBF55244C27610B39EFA2414D56D3AA711334EC1E71A5F3AC50ACF939546F3CA432E730E245A53C458CC0685FEFC6A4721552E81DAF0E8C762682F2BA2733B9E4124FDCBC6FA7EBBA15766F2617C7DA90C1F2646956801FF26E068DD295A5052AE8EE5B6CD1A53D946AD02D342EF08541E8A53CBBD7BC15AF55A59D7413CEAD18FE41E604EACB9F0D8F9F4402575ED427E5838F51B979C1D041BE9657450A61D65103B9A91DDD877B0CA8BB0D6A06C6E837C4CACF767A702496D22CF15847672C07EFBC036E8B9D559EB0842272735E69110CE205EFDA7984AB9080E401C6190286F98CE6BF1F55F5ED9D723C706F7D91A17FEB8433B6BDFD22C15A32857907A3B55A042AC092D302970868E793A085A912CEA5078ED03D357BEA1E5D8EF62FF0D384F6034A4563FCDDDC1497A0474621253DF0C919F0C7FA66FFE5FE7F1BCF5C7EACB978DBFB2633DCFA50F41E5A5A1765E9FF2EE4E74E1D5732D3E62F3C5DF466B69EC75DA6D19076108893A4EB9A6285979E384B5D3B14243F8D97F1310B50E8579E9A5EB5450AE4E36C79232345A2FFD69738625E3898D938C356989E43A74DD30469AA492BA370EA54D27610C8187DBE38D49E2E4BCA3F716A26558DCE6EF2F27EFB1A0798CBB28854818A1483D961C73AA54D1BC6AEF6388ED2E6F362C017F9AF763FBDC14B65BDF00E95B95350486EC85EBD2CC76520466333BEF0C8A4369EE854B523E44D3A8185F842DA479E44F8245262A67DBB4153EA2844B5FE71F2FD2A8BDD389E40E83EA0AB3F4A002BE4364B0EA712F8159E0FFE1BA3DD62090DB8FB5DAF6F7D8FF925C26B4EAB69087A9E53CA9293768B08C186BEEC9983EEB041720F1C50B5EC3C15ECCC074F498C8B602E329DEE31E6790AFC9809D91CF55DB95C8F04E6C036441A7FAD081D7D8B675AA1329E67C71C5DA278A7FB2EAFE47867FDEA51897841B88C5E5A83F8CE9E1F29D433EDCFCBC0FCDDC70C861899BF108EDFB7979BC5B7832436877E97601412858379496DCE6C8A6D19AE82EEE627AD738503CCFFB7DCCE7CF09F57779BF59B920B1D058E859E6DC82CDA17B5DD3C0FDE24DF96465CDF061FFF10CCD88E3BA199630728A0E91A6DAE8B20EDD9FA1C604D53F8EB11C5629EEEC626BA209323A0D40D2364443D710CB2BA1735A95A5A44ACDC0CA78B0AEE09AAE729210DD0ACA8B03F1235F98C208FB2CB7C6B55D6E77E91319DF4B52BEC39596B6C87C1E43CC369500830E1C10851E6AF9B15C1A21FA7B74C7BE7E6E0C7DC7D8D12F8038A1620AED5DD8574548C71096252580C18D263D2AC824265CADD664EE8E3CCEE114EEB22C49A5AB2EC06D9098D5E716EE050544FF97551B066287DD0DCC2E6AA795AF4A8AE27AE87A70556370E8510ADC92EA7F102D53
7FB9138544FAD2C57D22E8556D775E6E2FEF6CA9700A69E09E90BC01DDF27913A2107CD502340FDB562F8DE36CA80A6CF99AB80904F8946B0EB755B3B03785AAE8FA82ED1385890FC17D28F07F74BB56142CF8A79E135E7B712C0B097CDD07DC16DCE88B3D04E489B3B00CC7B0A58C5507719AA153C0142C3E1D23DAD0B9DE95E3379817601668EA3813AEAE63C2C155AADE8D30CED272BC455932FD39FEFDD470F2F42B373ED676EB8BDFEE13F2E4ABAAE5ABD60C41363CE3C3179B44B9CA8D8F67011F87D1A517B553E0A0F524C0160FB40BA61A50E22786EDF66C81E72A06430DF82A7AF6CB705FBA168EB5B923A6B3DDB730970B483B8367CF73CAA82A83C2CFB2E5F3C932E18C227F6C1A2F006809ACCA6C73333C6BF17AF62EA07BDAD60D57F3BCF9F1C60576FCFB53D842D625C9CAD07C5C88FBA5158DAD2278CCC28798F38B208B173C10477599835C2DBCF30522E581A16041C9BFB446B75198CC71108B970652583F41019E3C773A2F3A6C758807054163F2B8189903C27FAC262B1BD5181566D6D3ADA0E562749318DA66714B389FC958FF8A0AF6C516FCAC1FA916253E1A34F49C714572FFC82064955EFDA2B370A82BEF0093667D1DAA1EA09910606D3DC4055BFA2083B5B6EE32EBBEF9E9EF7F6DC4D0E04711A3595673197E80A9F0720C25A6F36F75E1CEBFB48EA26A4A8BD4F0992ABFABB8C47489A50BE7FEDDF72CC7B8A5983263B05DDB46DD5AF7B82D122C3B375789EE3A5094636E8A9897CE263C6FC1B3ADD68F56AECD633101DBFB143FB8721B00A49822AE4FEC74E202183290E15648E6D582902C2E8E2C01976762D198021C6B4445C326068B10323504AD7C7BC7CAC8F9FC7FD54DA3DC0D33D91B619780C680EE332EAFB4880DBD2E24627EBD230453D945B69103A7FB33BFC485563F5E14806A16DDB27E1461D0934902302E5F8356067517A90D98B9E93A3CFDB9DD839FC219EC0B06359AFD2BBB324C9048EB15778EEE7C823647A006B30B2CFC4C24EFED67925F97C5B3E2A3BEB711310D71E7ED5F8B18246C3DB80EFA7042B74D10B98B19F8FE7D6D312E8EC113565679104609931C745E8B8E82B0DCCF599F3EFEFE4D2F9E0809A0E8258273E3F86277468C592F8C5E8AA395505AB79C790799FF38242003364D440E7A7E4AD6C323B277EFDD4065AB7F8019B1D9D6824C431A24C336B0CBC69F115298F3E69C7E446022574E5DFCA10CEAA13FDB1BB713F0213222C4775F024C933430089D2A78BFA753CB389CED8E86C9245D5F842834247AD10DEA457CC64849451B31D81A85547852387BA754DCC64BD7A63FAD2B29FEE894953321AC1E4542446DF367482A13C9E93187C752CC7A73C17FF2F7CB7D18DFB5A42B1734A0E46DA607256632D9A14D5EECA915E2EAD7EE2B692FDEDF2C967D67D7A81EA5C5F70D75FA

02005D68E98DE7764C96E163C49522FAE3E889ADF8F251395A217290071053C858AC8B94A6321A1CD750F7989AE923ACBDBF9816C5E4B3D2279C628A0A44086C6499E96B71EDFD64FF168E66CA6C382A7B451884806502340CCA47170B171BAADB7D9667027FFCF1D634AA50D54206D7246637FEC509643DFE8295CB0A09E986F3B878CB1DF7E3218FB5D008E41203BA50B6086C7010264D2D29390884A2A33144815B9F7A38A1BC9A351B7492558B53FA12CFDB073C056F182560B3175DAF38296D3AF20D4EF632811D2E6702EB1283949BB9E510F545D6B5FD28DF3FCBE5A4B2D1F890231DD5911BA151A4CE40DE56A9F3AC1D5FAEA379D119E19EECCD30153A3BAE39BEE27D1108B3F568E3FF9646164D8616ABA4AF9C26885015404ED98D5A4570C720F227C57474C760DE64C8CF4D51603A69893B2F7F63EEA7DA6810BDA9FB3A1A948C003637FE5492E749EB365F8A0EE86615E775A999196F93BA5C354A1CABB282D165597AEF5F1A4004739FB1B5A818C15F64969DF03DD476844C6DB1D6CC0D037B544EF5CB642B286735EB1486A0D3B61B4294E1E3D999E4DA888655459262E517B614B235906D95B555D0DECD71F059C53F506B62BC2C387CAB6EB20C373E2E109AE491AB91A9BBED402514E206A4F3F6840F6FAA4F75D17C5F171C33B189B8BD8E7E3D951D7EB2DEEB728E49343087D4AF22AF90553D08E48E7075FAE6F852080B652655BA39AFDADD785343F72279501A0491E82E46E299881E70CB056B02143F180D10F70A49BD09D3D179ED1C0905937E35C159CF0ED74A8F43F70A030C8C19C665C3BDCD6CBF49AF00997EAEB2B1E27811C7D02CBA76CDA18B053F5EB07B4043ECC62501EB437652450BE5415B6FF86C59F27E7CF6EBA61D7733ED5F871A507E1B80BAB6DB83A6DD57E459F86E7B9FC90CF904F70C57E996D05DC9189AC4250B88ABA83C042EBF3961D35093E98A9D20703ADB3804B3730A1FB24ECDA6C48C39F4D545581BDF8A7B7BDC75555E3757CA2A9528E01C2EB1A34A26F49B025F6505359AE198A8D23E5228B208A1506191D3C26A8229989ABF3FEBE942B459EE5920813C093A87CD6EDA68FD6B32A741ECF3EE19FC6287566EC1638712A9FDB20FF386878F80842390D2EF40F885122505916B481183335F581CC9B8CCCF09B3BBFED2C7057D1EA23423A1A4D570D3EF6DDC9F3F2D9EEF839B5F346034E5236F0CA8322B7205C3517FA3758C610BBFCBC0807B9915E277125834ACEB6002B930ED52D5633D23B2F5225D92D5BFDC5FB9A2450FFCF102995A8685C43754D294D9C3A932AFC15D0EB63F21E559B9169E65A51AAA43707DDDDB4EFF5F8A4EEF672190D9FC017DAAB803677AA0D55C8345B6CF617AF3C0C1D550682538A2E9C563BEBB4FAA09D7C834B281F9D0122B4043371CC4DD543D013900B0EF
F94FD14E6F55559B1588E7F0D7D6723ADB29D58D3D8201DCB103FF24180FB370D8725D826378F77D60F705DA07D10FD0E38F554274629B223294DC9E1220FE4D8E746D84294CAC881B4C56DA78105F0062997EE6CE85DF0905C308A900C3F4D85171905C9E33D4EE1948962FD34B225074C47FC8E3CD0E13ECE39E44F1568AC4312DC762FD62E2FC1C89D0782A31014C1FC6D7D8EA5934118421E6646165092366646990CED9BE3971C52BD017E037C74A08072C943233F66177256F6CBDC171A5C6BA30C549C2A412D4FE3FBC0C455EC8C5E74C55F03DE14E7385D5AE3EFFCE6E08A7CBA5543A455F046825499A0CA97C01B3BA4694F86CC1DFD4F8F8C4638740F9667CD2AFF3AB541043AE42F0B8394328D39078DD25A638613079EB8FA75B66F84F67C1221DA1B217B29D6DD30CEC56C5B1527B624D0299FD481758266E5EA55ED34647D3190D65FF13AC7CD554E344CE109DAE71D68D328BF37545F47F11AFFA9320DC65B462146AF92B4C5D32FC85550351D91B66DEBADB9E86A316BAF608095D84387B7CA17B1B16B07A04E89C4C73BD40
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Light cguidfix
/F1.1/HelveticaNeue-Light renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.774782 0.71957803 0.88349402 sc
q
0 0 95.5 118 rc
7.25 27.5 m
95 27.5 l
95 0.5 l
7.25 0.5 l
h
7.25 27.5 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
442.125 414 m
486 414 l
486 522 l
442.125 522 l
178.875 522 m
135 522 l
135 414 l
178.875 414 l
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 51.125 14 cm
/F1.1[ 10 0 0 -10 0 0]sf
108.81 47.20993 m
(!"#$%#&'\(\)*+)[ 5.930000 8.330000 5.190000 3.150000 5.560000 5.190000 5.370000 5.190000 4.630000 2.780000 5.560000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
0.5 111.875 m
11.75 117.5 l
34.25 117.5 l
45.5 111.875 l
34.25 106.25 l
11.75 106.25 l
h
0.5 111.875 m
f
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
108 76.5 m
153 54 l
243 54 l
288 76.5 l
243 99 l
153 99 l
h
108 76.5 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 23 111.875 cm
/F1.1[ 14 0 0 -14 0 0]sf
-19.837999 -3.4060974 m
(,,+\)-.)[ 8.820000 8.820000 6.734000 3.892000 7.784000 0.000000 ] xS
-35.539001 14 m
(/'$-"#%01\()[ 8.820000 7.266000 4.158000 7.784000 11.662000 7.266000 7.784000 7.266000 2.590000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
198 99 m
198 143.10001 l
S
0 i
CM
23 93.224998 m
23.75 95.224998 l
22.25 95.224998 l
h
23 93.224998 m
f
0 J
0 j
0.25 0 0 -0.25 -26.5 131 cm
198 151.10001 m
201 143.10001 l
195 143.10001 l
h
198 151.10001 m
S
1 1 1 sc
CM
9.5 90.75 m
11.5 92.75 l
34.5 92.75 l
36.5 90.75 l
36.5 81.25 l
34.5 79.25 l
11.5 79.25 l
9.5 81.25 l
h
9.5 90.75 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
144 161 m
152 153 l
244 153 l
252 161 l
252 199 l
244 207 l
152 207 l
144 199 l
h
144 161 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 23 86 cm
-44.778999 5.2969508 m
(2#034$#\)56789)[ 11.494000 7.266000 7.266000 6.734000 7.518000 4.158000 7.266000 3.892000 3.108000 10.374000 7.518000 5.180000 0.000000 ] xS
0.25 0 0 -0.25 38 73.5 cm
-46 5.2969513 m
(#1#:0;#<)[ 7.266000 2.590000 7.266000 6.482000 7.266000 4.144000 7.266000 0.000000 ] xS
/Cs1 SC
0.40784314 0.73725492 0.21176471 sc
CM
9.5 65.75 m
36.5 65.75 l
36.5 56.75 l
9.5 56.75 l
h
9.5 65.75 m
f
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
144 261 m
252 261 l
252 297 l
144 297 l
h
144 261 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 23 61.25 cm
-35.539001 5.2969513 m
(/'$-"#%01\()[ 8.820000 7.266000 4.158000 7.784000 11.662000 7.266000 7.784000 7.266000 2.590000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
198 207 m
198 251.10001 l
S
0 i
CM
23 66.224998 m
23.75 68.224998 l
22.25 68.224998 l
h
23 66.224998 m
f
0 J
0 j
0.25 0 0 -0.25 -26.5 131 cm
198 259.10001 m
201 251.10001 l
195 251.10001 l
h
198 259.10001 m
S
1 1 1 sc
CM
56.75 90.75 m
58.75 92.75 l
86.25 92.75 l
88.25 90.75 l
88.25 81.25 l
86.25 79.25 l
58.75 79.25 l
56.75 81.25 l
h
56.75 90.75 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
333 161 m
341 153 l
451 153 l
459 161 l
459 199 l
451 207 l
341 207 l
333 199 l
h
333 161 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 72.5 86 cm
-52.262001 -3.4060977 m
(6$-=;>\)?-$"-&#\))[ 10.374000 4.158000 7.784000 10.374000 4.144000 7.518000 3.892000 9.856000 7.784000 4.410000 11.662000 7.784000 7.518000 7.266000 0.000000 ] xS
-51.73 14 m
(,4@@$#33A-&\)*#3;)[ 8.820000 7.518000 8.036000 8.036000 4.158000 7.266000 6.734000 6.734000 2.590000 7.784000 7.518000 3.892000 6.230000 7.266000 6.734000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
252 180 m
323.10001 180 l
S
0 i
CM
56.275002 86 m
54.275002 86.75 l
54.275002 85.25 l
h
56.275002 86 m
f
0 J
0 j
0.25 0 0 -0.25 -26.5 131 cm
331.10001 180 m
323.10001 177 l
323.10001 183 l
h
331.10001 180 m
S
/Cs2 SC
0 sc
0.25 0 0 -0.25 45.613281 86 cm
-20.216 -3.4060974 m
(31A%>;1\()[ 6.734000 2.590000 2.590000 7.784000 7.518000 4.144000 2.590000 0.000000 ] xS
-25.158001 14 m
(#1#:0;#<)[ 7.266000 2.590000 7.266000 6.482000 7.266000 4.144000 7.266000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
396 207 m
396 279 l
261.89999 279 l
S
0 i
CM
36.974998 61.25 m
38.974998 60.5 l
38.974998 62 l
h
36.974998 61.25 m
f
0 J
0 j
0.25 0 0 -0.25 -26.5 131 cm
253.89999 279 m
261.89999 282 l
261.89999 276 l
h
253.89999 279 m
S
/Cs2 SC
0 sc
0.25 0 0 -0.25 54.712891 61.25 cm
-7.651 -3.4060974 m
(&-\))[ 7.518000 7.784000 0.000000 ] xS
-36.554001 14 m
(34@@$#33A-&)[ 6.734000 7.518000 8.036000 8.036000 4.158000 7.266000 6.734000 6.734000 2.590000 7.784000 0.000000 ] xS
/Cs1 SC
0.58823502 0.384314 0.81568599 sc
CM
34.25 47.75 m
68 47.75 l
68 38.75 l
34.25 38.75 l
h
34.25 47.75 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
243 333 m
378 333 l
378 369 l
243 369 l
h
256.5 333 m
256.5 369 l
364.5 369 m
364.5 333 l
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 51.125 43.25 cm
-47.705002 -3.4060974 m
(;$0&33@>#&-A<01\))[ 4.144000 4.410000 7.266000 7.518000 6.734000 6.734000 8.036000 7.518000 7.266000 7.518000 7.784000 2.590000 8.036000 7.266000 2.590000 0.000000 ] xS
-27.363001 14 m
($#3#';A-&)[ 4.158000 7.266000 6.734000 7.266000 7.266000 4.144000 2.590000 7.784000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
198 297 m
198 351 l
233.10001 351 l
S
0 i
CM
33.775002 43.25 m
31.775 44 l
31.775 42.5 l
h
33.775002 43.25 m
f
0 J
0 j
0.25 0 0 -0.25 -26.5 131 cm
241.10001 351 m
233.10001 348 l
233.10001 354 l
h
241.10001 351 m
S
0.58823502 0.384314 0.81568599 sc
CM
11.75 23 m
90.5 23 l
90.5 14 l
11.75 14 l
h
11.75 23 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
153 432 m
468 432 l
468 468 l
153 468 l
h
184.5 432 m
184.5 468 l
436.5 468 m
436.5 432 l
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 51.125 18.5 cm
-37.471001 -3.4060974 m
(B0<A0;A-&\)*+)[ 9.338000 7.266000 8.036000 2.590000 7.266000 4.144000 2.590000 7.784000 7.518000 3.892000 7.784000 0.000000 ] xS
-32.542999 14 m
(C1-&%8;#$"D)[ 3.374000 2.590000 7.784000 7.518000 7.784000 5.180000 4.144000 7.266000 4.410000 11.662000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
310.5 369 m
310.5 422.10001 l
S
0 i
CM
51.125 23.475 m
51.875 25.475 l
50.375 25.475 l
h
51.125 23.475 m
f
0 J
0 j
0.25 0 0 -0.25 -26.5 131 cm
310.5 430.10001 m
313.5 422.10001 l
307.5 422.10001 l
h
310.5 430.10001 m
S
/Cs2 SC
0 sc
0.25 0 0 -0.25 65 32.125 cm
-46 -3.4060974 m
(A&'-"@1#;#\))[ 2.590000 7.518000 7.266000 7.784000 11.662000 8.036000 2.590000 7.266000 4.144000 7.266000 0.000000 ] xS
-46 14 m
($#3@-&3#)[ 4.158000 7.266000 6.734000 8.036000 7.784000 7.518000 6.734000 0.000000 ] xS
/Cs1 SC
0.58823502 0.384314 0.81568599 sc
CM
61.25 14 m
90.5 14 l
90.5 5 l
61.25 5 l
h
61.25 14 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
351 468 m
468 468 l
468 504 l
351 504 l
h
362.70001 468 m
362.70001 504 l
456.29999 504 m
456.29999 468 l
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 75.875 9.5 cm
-39.025002 -3.4060974 m
(E#%:A3-"0&;)[ 8.820000 7.266000 7.784000 6.482000 2.590000 6.734000 7.784000 11.662000 7.266000 7.518000 0.000000 ] xS
-35 14 m
(C3>-$;8;#$"D)[ 3.374000 6.734000 7.518000 7.784000 4.410000 4.144000 5.180000 4.144000 7.266000 4.410000 11.662000 0.000000 ] xS
/Cs1 SC
0.58823502 0.384314 0.81568599 sc
CM
11.75 14 m
38.75 14 l
38.75 5 l
11.75 5 l
h
11.75 14 m
f
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
153 468 m
261 468 l
261 504 l
153 504 l
h
163.8 468 m
163.8 504 l
250.2 504 m
250.2 468 l
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 25.25 9.5 cm
-31.514 -3.4060974 m
(F';$#-;A<#)[ 10.374000 7.266000 4.144000 4.158000 7.266000 7.784000 4.144000 2.590000 8.036000 0.000000 ] xS
-35 14 m
(C3>-$;8;#$"D)[ 3.374000 6.734000 7.518000 7.784000 4.410000 4.144000 5.180000 4.144000 7.266000 4.410000 11.662000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -26.5 131 cm
261 486 m
308.25 486 l
341.10001 486 l
S
0 i
CM
60.775002 9.5 m
58.775002 10.25 l
58.775002 8.75 l
h
60.775002 9.5 m
f
0 J
0 j
0.25 0 0 -0.25 -26.5 131 cm
349.10001 486 m
341.10001 483 l
341.10001 489 l
h
349.10001 486 m
S
/Cs2 SC
0 sc
0.25 0 0 -0.25 49.509853 9.5 cm
-33.061001 -3.4060974 m
(A&'-"@1#;#\))[ 2.590000 7.518000 7.266000 7.784000 11.662000 8.036000 2.590000 7.266000 4.144000 7.266000 0.000000 ] xS
-27.747999 14 m
($#3@-&3#)[ 4.158000 7.266000 6.734000 8.036000 7.784000 7.518000 6.734000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
