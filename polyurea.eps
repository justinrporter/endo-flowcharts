%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 373.000000 418.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 94 105
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 94 105
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue-Light
%!FontType1-1.0: HelveticaNeue-Light 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Light def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /T put
dup 34 /h put
dup 35 /i put
dup 36 /r put
dup 37 /s put
dup 38 /t put
dup 39 /space put
dup 40 /ampersand put
dup 41 /U put
dup 42 /n put
dup 43 /a put
dup 44 /o put
dup 45 /l put
dup 46 /slash put
dup 47 /D put
dup 48 /M put
dup 49 /S put
dup 50 /u put
dup 51 /p put
dup 52 /c put
dup 53 /f put
dup 54 /C put
dup 55 /e put
dup 56 /I put
dup 57 /W put
dup 58 /v put
dup 59 /x put
dup 60 /g put
dup 61 /A put
dup 62 /H put
dup 63 /N put
dup 64 /E put
dup 65 /y put
dup 66 /m put
dup 67 /d put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -430 1 index div -305 2 index div 1987 3 index div 1163 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C000000446670676D00000000000000E000000439676C7966000000000000051C000019EC686561640000000000001F0800000036686865610000000000001F4000000024686D74780000000000001F64000000946C6F63610000000000001FF80000004C6D61787000000000000020440000002070726570000000000000206400000139140014003A00350044003F0000000E0042FF0A0004020F00B3020F00CA020F00001400350027002D003A003F002F0035004400540000000FFF41000E0204000F02CA000FB800002C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800012C2020456944B001602DB800022CB800012A212DB800032C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800042C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800052C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800062C2020456944B001602020457D691844B001602DB800072CB800062A2DB800082C4B20B003265358B0801BB040598A8A20B003265358B0022621B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B80003265358B0032545B8014050582321B8014023211BB003254523212321591B2159442DB800092C4B535845441B2121592DB8000A2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8000B2C2020456944B001602DB8000C2CB8000B2A212DB8000D2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8000E2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8000F2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800102C2020456944B001602020457D691844B001602DB800112CB800102A2DB800122C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800132C4B535845441B2121592DB800142C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800152C2020456944B001602DB800162CB800152A212DB800172C2046B003254652582359208A208A49648A204620686164B00425462068616452





012D26412F1B182A3921FEBE014C2E4A331C392F5900000000020022FFF2020A02130013002700C7B800282FB800292FB80023DCB80005DC410500DA000500EA000500025D411B0009000500190005002900050039000500490005005900050069000500790005008900050099000500A9000500B9000500C90005000D5DB8002810B80019D0B800192FB8000FDC411B0006000F0016000F0026000F0036000F0046000F0056000F0066000F0076000F0086000F0096000F00A6000F00B6000F00C6000F000D5D410500D5000F00E5000F00025D00BA000A001E00032BB8000A10BA0014000000032BB8001410303101321E0215140E0223222E0235343E0237220E0215141E0233323E0235342E0201162D442D17172D442D2D442D17172D442D3B5B3E20203E5B3B3B5B3E20203E5B01DE263E4F29294F3E26263E4F29294F3E26352C4A633838634A2B2B4A633838634A2C000002003CFF42021802130018002C00ABB8002E2FBA0023000000032BB8002310B80002D0B8002310B80004D0B800042FB8002E10B8000EDCB8002310B80016D0B800162FBA001700000023111239B8000E10B80019DC410500DA001900EA001900025D411B0009001900190019002900190039001900490019005900190069001900790019008900190099001900A9001900B9001900C90019000D5D00B800012FBA0013002800032BB8001310BA001E000900032BB8001E10303113113311331E0333323E0235342E0223220607233501140E0223222E0235343E0233321E023C3F020A2530381C3B573A1C1C3A573B3F63160201631329402D32452B13112A46342D4029130204FD3E01201C2A1C0E2B4B633737634B2C3B3662FEFE284F3E27273E4F282C503C24273E4F0001003C0000013B020E000E002FBA0003000000032BB8000310B8000DD0B8000D2F00B800012FBA0009000800032BB8000910B80000D0B800002F303113113311343E02173526060723353C3F1C33462B466518020204FDFC01132945321B023F03443F790000000001001FFFF201C20213003B00A9BA001E001F00032BB8001E10BA0001000000032BB8000110BA000B001F001E111239B8000B2FBA001600000001111239B800162F410500DA001600EA001600025D411B0009001600190016002900160039001600490016005900160069001600790016008900160099001600A9001600B9001600C90016000D5DB80027DCB8000B10B80032DCB8002710B8003DDC00BA001B002200032BB8001B10BA0006003700032BB8000610303101332E0323220E0215141E021F011E0315140E0223222627231E0133323E0235342E022F012E0335343E0233321E0201713F021E334327224538231627341F51152920131B2A31173F55043F08715B244A3B261A29351B541026201516242B151B


00>] def
/CharStrings 37 dict dup begin
/.notdef 0 def
/space 1 def
/ampersand 2 def
/slash 3 def
/A 4 def
/C 5 def
/D 6 def
/E 7 def
/H 8 def
/I 9 def
/M 10 def
/N 11 def
/S 12 def
/T 13 def
/U 14 def
/W 15 def
/a 16 def
/c 17 def
/d 18 def
/e 19 def
/f 20 def
/g 21 def
/h 22 def
/i 23 def
/l 24 def
/m 25 def
/n 26 def
/o 27 def
/p 28 def
/r 29 def
/s 30 def
/t 31 def
/u 32 def
/v 33 def
/x 34 def
/y 35 def
/A.short01 36 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-430 -305 1987 1163}def
/UniqueID 4428012 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9316BECA57231A7CB682134460003F1A5A5A2E37208486F0FD1BC1AF8304971C26FFDC61793699F79299545A5A5732F18295ED5D1C9DFA582BABCDED287848AB5106007DABCB9E6EDC9A6327A3612B39E5BDE32CF37B7A9FDB707698C60CC862F66E58A91D704FA39ABB2FA5EC26415CE8D65C6F7184E9491A87AEA378D332B4332E6C9B5696647CC08E579D9D6D05C510E17E743929524EA28A3ADD04AB1BBD66F876DE999E42C1F7EE8714589F51320F90F74777138F6EC653461965E4E21173F6CD534B6E90445EC07A3DE778BDC410A1DAAD95A55557BE9C58A617F53EB19C12F44928FD63E255A8529BF436A76D1958BB34B71E28D2A15FBC0756577909A8F132F09514DA42322D0A2FF20AF3A95959E2D34F0AE0E0ED060BEB293C075431A5FBDC3226EB3293E5B0B64DC1F673A219EF12D38BA66C04337E09DC764B034C5871E96BCA78ACFD78AB3B6AA11DB32C0CC3067257A8EF58F1D9B5FCCE3A754C4E5DAC4764F9CB048DEDC44DA591461600C02DE5CCD916F417F7BB6D020A51D7448931698EA4E9A962616092788A95DCB5C91B22DBC37394037B08F3ABEF57342616E371662109998B35BB04E58D56EA7CD2E857EBB37FB105CE1244AE66B95E1E5ADFC7429B67BAFB901FCAE14A4DA7298F0BE832FA6ACB3E021E5FA76213214840ACEFD9E4C151FBD495F6FD3163492D4259CC9BB54F6E693313BE87592A0B3E06E9C4737BD71CE1F21FE9E96116AD53DF0AA8638D6AA1D82981ECCE5216F4
B4DD2A2B21F58DF723105E0B7CDBB1558DB19C8828AFFDDCF90A2D4847F4A683D8D82D8CA086833ED8F5CA22F21EE4C09F1E1C05ECB056AD65FA952BFF12A07D0FA5AC32D0D4C8757CF9196FF30E39C24D5AEF98E0F238F7F33D79FF4BB73A9AEC2DC37DFDC27AC6E007DF0D4D02309F991AA0B8B0D516DBEB9DB211DC23A32892371F11E6453980905B585E251F2F8DBE71354CE4799B0ECCC21CFD479841EF1F4AA45793386F69B679965364ADEF8830C5C46E81B56E7E7269AABA4FA4B519B78BCA92CB93D4E735576DCFC48D3823913D0D5A182CEB18586158CB7CD35649ED0764C21369E9BCC2BE25B04D00DE4414BBDB1C3EC46FB3649D28A7B83A4F0E220BCE4BD247DE51D9750130B3E5DA6C77DF4E9399670E536CC54BB7682B2991E1E595874B6100D58C140F688212BA51CA8D8CBFD23B9B3DCE2ECACB1201465B26E4EC34BEF0E92DDDD3FCC2F820A73B3B57CA0D678E73842BE7D58F513FE069B28E8FF641F1EF92EC3B04ABB8F4A24AC76FF52BAA82D1F5F8E1DA6F8EF346B38656CAD047B358EF0A987CAF4F0E4DE02E4D7E618FE9F0FD72F401971D34A29627F04A836FD5FA9997B3565B0B95F60E016C2A8D08BA0565881F58DDCE19044508E08C4960433F707D52FA18BDD44A3688EFC79F35AFE4F7A2DEF530095A204FFEA031238AA02DAC6723129590DFA34681DEEAAFDFA01502C9C953A511BC94DEE5E38CC002237952D846681C20C622E741D86D731F92ACF03F044A93DF0EA69DA7F3E7A90424C9627D37A74E0DA117A9036477894F88E8582B59A13E9C75BF5DEBBD5B754DA4E19CF9D5EC06B63E0133194AD9BF0DCFFBB91A708E96BDF508C6489D82404F54BBE6918D40EB1CDF95C4E1ADA46D0D808B0126157045280F037435FC605C45E27BE895E9D7C0D6C609BC09A295EF59F55EB763EBE58EBA189B694412E983E745CC01CBCFED1274F163109657D4D4964D534532BB6E0DA6F0DCFD667B36EA6FBB296E826EEB4F39FA9C10C9280D11AA83416C0A6FA7AD14F43C0ADACF5B8183DDEBD0234AD8F739CDA357754312FC7D7F3EC5E57D25CF76470D61105237C31996A08952996BBA1561BCB0AE2C897D83ABD2CD74744EBDBC60D2C46A819C18D28EDBFCC6C8642EB64052524BBEF7682C060918C1403C7B915ACB5FEB24D5DBABC8700E9E039C18D334D909FD071B6D958BA3628261294AAF26D55CDCD9BFE656FF735B3EF639A2FAB634EFC5D52DF8A79EC0722EF687E90B9258532B72E7472086D4910C549C9324F1B8B66F401472C198F300E278866E54654140768FFDA52DAA497FBCA3EA656EB7597624762B0D257DA6D2BC2EEF41E2F05D3BCAE61D9F0AE44C56940C61C880791D20A3F4DB463C1B595372E715CB19169BE6B4B3C63301EA183D6760A77E14065A8F347643A4B748A72C28BCC2FDCE1B6491
247FF95F993925908A8A44EB2A7D943050374BA5C23ADCB664EBC8699ED835E8E73E4F1B860F686FDD7B5001905D0B4BF611AFA2D255374B15B8C29B9960F48CF7DF6E4402D5EAC8248B94771FA7819C98582E924848F034D485F4955202766F7A163D5675AF1DFD0F40AF099898F1BD0848A889FEF0048AA03ECC7D11E286AC25C19CAB9ADDDDE4D72DBA30092B0928661313C8FDEE03E323EDB4FD730CCF10D3C4BCA3A10033A41F1671CB1231A8F41416EA5B754D9AF38B1527603D12D52976894E86BCA54F14DB003C35B377E3B1F7B00FAD1581DE4F091DBCBB0A29B87BA70B9626EDFD227FF444E4EC2F8A22FA13EDEEE30E675474DD83C1A33165143AC9639756293C31ABD557652695F3EF73380B5473AF9A12846E66212D5E78F634E7CCFC06565F853C642A59D744582A4FA8E7F41952F08F9679F750A26C5BEA71C4C509369B20AC387291281C0ABA1F2398571D1B42A4A00563553E97EA9A91B8680E649AA4DDD949D70A69E33DDD3AA704496935A5331281B2C662586E7308815137C6669C0C363BEE0F8E925E5D6888C929CA3693DA8A6661A71C2B3FC5A105FADBB944BACC0E80A059F6B55442F1D21AB91A8479CB5D0C8A929D46A361B657DABE831ABCAEEBDAEAFFDCD12A40F087A48CBA57B7B264A812CAEFB96BFC5363273DFE51DC2E1BF80E0AACB7C7E1DC60D85527298D072E9BAB1B63F1E1AAD3FC9D16962DFC8F103174F4C005356BB01BEF59488C242677FA27CFB0979DE8D019E81CB3F13F292F640173A40E867100C2FEC031B10ED039ECCB1513ED1C1539C7B2B1E5737FB6C5382091ECADDDA181D48159B0FCBCA2F6D07216A1CACBCA165D6D67550B366F041AB8FA3677AF218EAA36C692CB31D940607DE224434BEB4AB11FC936C44378BE9B5451C740B82D78809D5EE4B805BF225EBC02169196817DFA67BF363B6469F0704C352EB04FB9F7D88CFE24FF13C097786B0E9198E7B79BF1D30C327719D738DFCA01836B70EE279AE6DA08D4B1246E7F992D392A2D83C5B56BFAC1EBBD09D2C66CCE5670D856519B20E9B9F9A7928836567CEF60917F981E568FDBAB3E0745BD5DB412714474F5A2F6670D62FB5468584EC85902584596912442E7DE3B222851097119FEE63720827F7998ACBED966EC83332A061385BDC8C3E6FB743E11AAF8BBBFB090E34328DF47A81037202C8668B6D8E59A6610BFFC882A4F82ADF6F84A566AE3A607C192383D30030EAEC02E988AD0CE9FF0FE1A3DD093E4623FDCECB3002073A30125D24519FBDB74009338FF2146748182206CE88FAFE09DBB1D189D3EA21FCEDAB2924D7284D1072C2D0A2EA42FC3792CDE4623A345829BE77650AE43CD1D6BB8809A2782D1813CCA2FB146C03997DB9FC75DAAAFAF74F206B75807B7D91187696298635AA8054B6F4F1B59EC28A1319CC67859
5AB47D0CF4F922D7735031D3F05B4D9A0DE8D3586F277BF91CF5F5513169B56B88820DD0217669EDF9B48278CD61E78759D95E8A1A625B983FA0041C99996393880C43BD49BD4BBD53963600352089B395F06853FFB45BC3AA91C0727119CE1F16F7C0A928C61A4F7F01FA33865228B32DFA8D2545FACA35910780747BB69FD9CCCDDDE47FDB75EFD91664B082917F70F39195C2B75F3101114983EA4CE1D3441A9418A5433A030C271BA78C193C8B1AD04C365F16CA58ADFC029636573131BEF40B23287D262077DCDD812C5EEBCFDC7A4F04549F62983EE9E9EF816EA56A307834F25991F77F010DDEA6E6DA1BEED5B77A503CBD7EFE08DAD57F11A842EA10AE3DC95977CABDDFBA3C17797B85207024D48C67E1671E5ED80819542EDEE47920925D2D052EE67011A6579D214ECFE091D9F3B2D23F7E6D109D5D47A6F87781895C708DD6497AF82BFC234473C18B80FB3745BA5CD7006AF0E39DC418423BC4B9B5B04F89854A0041D2F3F35C4186CDB76B2402E1FC5024B4837CB1731371A94C8019F59D7977AAE6A8EB34753AF5A5C56FE75BADEE1558F0602D9C4B28B28505824506BC9EF14630B54595BAB0450C457F6E1C5D7885EBB9E107F6D3A57C53F7BB162E08BD36A007B5F1E62E3D76FAAA682CCCB5549167A69C404C1C72C7906B6B416C4189041B8E4DAD51FE0F51F5BE8FAF3425A3D209935358A40F982A60864A3BE92D198A3A9B29463EF55226886C845C82E7CDF225D325B131E10E091803B1C3B2CA0C154678B624F6750C093CCD8264EA62F9F9625C0A21001367F58DA4398F52FA7B8B112BE42C25B2F726E0B76FD74BCDEF0E57CEAA5C63FFA12CBCCF6143D90833987F97D6BC38B000A301E7C1AE7B592644732EC87B6D28CB11270331E099EB6055A7AB4529C794414EF27AA0BD9861F0C4E0BAF64E60FEAB6971F1120292E9EB9F6B610790958FAF554FD5AEA6798F41A97E931FB5673AC2A95D379B9B363298C9051CE928D6A50A66874BE64C58A2BBABEB724D486F54FD0E424646434B0C42335FA5E59647382E9C27F567A5BA587C4FBA0F3470E7C9A69FC69A0F6E63CD765698AA12BA0818405C543F532D750D356FA5260A927DFB93A3241E38018A88F7FB0ED188FDDD599A1A290CE95E68646DCC2E2C1D0A28E370C2DE8B24CB42BB27C59BE63B85A3204A963161450FADE65C41E0B75C939CD27E4EDB5AE10F356E4AF6AC727F710E026EF4B779CD4953C38C8C767076C14ED1E2FD3F9251ADE3C6F599F922A84E7519F038B2C671F3BC657444CCE405BCD9221D8E40B692B5FB6A1FAFDCD8507D703C8BA400E89C9F82BFA816FDF164877D223AAF2EA320C0E2055F067B102B6A0951711121DD3D6F239FD4FAF2C0480739F8EDDAEC48CEFBF9832A78B28847E1A56CD3F249A1B22B199170043786BC6CAA394FB898
D894A51E6313C7B9F1039BFE0ECAB2647806D0A8257CCB31C08ACE4927964B208C35A784B7743C35B8E23BBFF096F0715352848B2ECB3BDB3180D278E0B093DF7B817952269E1692DC8038A01EC17B991A09611D6686C6679FD574FDBDFC092F616147F8900D9D350EA83E9942A8B6B4E63D67D6B46FAE1C52E0D4FA1861998DBACC873F93F8B06811E9D623DCADB6E64E3D74637A4FE5FC71D8703B93B3EF67AEC57B807A5798E4638744DCD658A8D183DE526E8647AF125D4EF84657CD18FD8DFB070D98A094A94725C9DA2186F38CD5C2506FC12449CB83DEE382464128AB07A842D30A2715CA49702691B94CC6210575E13BE902E3FC799C01AF8F765678397EE782E13989E8F4B78840CA46AD36BB406E89681788CEF095D224B158B3E55430F816658D9D55D72D86BB57007D1CB1172329008240AA8D232616F60BB24860F10E3845B2E3CCDCDD5972C52052F35D1C5962D9E14E94D7C7D012663A3265A4181FF37A675EBC58F3EBAF5945F65A568EB50470EDCA2F71A4C7F41F7B9E871267D5B6A378A638DC57B0A0FDD2839D497A11323A09B373D89C360DB2A8D9BD0CB10641DDAC6EEB0EE19AAD0C9C634CEA84A92765988EAC64796FD632AB3A61FB547C2E55CB652A56352CCAC65BE1127E898F2B1B0F4AD3B562AFBEC94E96721AE8157AB498181A8388070EE3D69B0D2095C5CBC626792F44ACAB97B54856D73D3D4608E4694ADF89ECBF7062081785726F218BEBB10538896FB6E253967F3FB6552DCD835F90FE50BC82C0E6719697E1AB9C9B435602C0FC144A3FB47EDDC8391A108AE0988DA984DF3815564DA5E61C24376E6F13D2698CE7F5FFBBD845822291A49C1010EDD0BCBC3172F4CFDBBE26561176C6C60B9986F90797F42B27273B973B516DF75A654B14BC7D0EB81996DE5B14D6A81264E5BDCC918D1DBA1DA59239AB4CC1E88BDBA2481BF095217BAA03AAE6F7149DF2BD76768A9984351F378D0DC298C161867D1CFD4598C72E4CD48C5F666F6577C68A438512E95B958C6AA8C88B111A03563ED16387D62240EDDCC4C24C5B0366616741CE34FCFBA8D6B1CEAD3956F1B978AC611071FBBB97AD5F3EB851EF69E5BB4CBCFD126B10756538C6FE6B4643595AFAE09C4E24295E77E25C81AE381BA1306149C289C84B8842AD0F8AF17BCAC1DACA238CF9612D2ACCFDAC1250A01224761C526A41B3220F7D2DDABC8FF11C2E61D08C829B7A8DC00E63D24D149C4A5647568F2F7B4775E26AD93240AB438AFB6BD9E766095AB5988F91A5D35E2C39DCF964967B407C6DEF4AAF4FD77803DEABCA56660C0A62E0C647E858C26EB6EDBD3B30ACE6EA753D74E73C69DBFDFEFC0F1CC56BB0169282D5DEC50D796B37E9348B9E42180D2B4303E4E22FF8A2834574DE93B6E76E947D5425604AE43A3E02B04C2A82797DDD7A2F1916
D20FD774DBB890DD741E904E629CB3D0D456F36CC620177FE9156D2CA12BCA0E458B99D7D42385142A195D0B7B77E882B8F48F94F0F759719215EC847F937F5ABFA0F4347295C2FBA6874985D6D89FD818411DFC2E723E3D4936254E2ACDE7A580624A9A591AED9B1F6E56DE2C7739E5F5E27F92E450240A6794F8ACA15658FAFB57239876CF091017540920C9C88BC4564F185CBF04C948AABB0B8114590D21A8AE3E80BB63576524BE6374310C5D3B8D17A7E56D223669A71226B4EB962E9B7787A534DC78752E956E3894855232040900E78C7A207012CF7502F3C88E18012F1E0FB36B546413E2C8140E0D4F30A03182D8E26B9E1A0C3FD0358C669ECC17EB33E9AB90B245DB30524D2D8C3C4F1CC3E1369F2902A39DCA1BB8425388EC36CFA09F4231E4BFD94600458874293031AE3C70B7B165C243CA8C798937E68618124700F8B67FB8C0DDB0DB46BC8522276CD07A5D277F0A79E1C58EAA95D814421C283F4BF42C735D517FA6C46535B835FB17E8561F2CB08DDE3CCA132C93A8C05CE2331C6762F62DE079383BCA6F290EDFBD0131E530F140F38BDD2B6B0206158148B336108AD5D319E0D030FB057EFAB2D3255B37980F33AF02FF25CC609163AEA38FA8E1D1F9D6B1193114F8B80A2FE5038D54864980DA5B8A6D4B9700F8123C0AB9831039DD6E02D871559C84E28939E7B730033EBC6663AFF622F500E53C54294DA647AC78E33B8484ED210CAF5CAD213D4EB31D67C33EDD4179B5E60B1C4CD945CBBD9EA79E09A0A415D54BB900F47477C6F2BBD564EA23B256E04482AB399E258B6C374D3C13A8AB1B449CCF2A7359E48EE727DCB2049437D7D12F17F088EFA4CA1911EC687F887716F92D6CBA0EF5E1BD399A5EF2A6516697B5ECF12EBA5EF0F1F18A7A2BF1842EE0BC2EC80F90074A59EDA575C8B7BEF7943917390B5A189C559D36F0139039AEADB8A320370BDB49ED4309A14A9535C91C09F327E0EDEEDBD5FCAA91773397F130D8BE15B4EC52D9FAA420085208FAF19BCAA22C38D604837D08DA04423519908B61B06606D4D546C37156A5832B09193AFF9E620ECEC35F7B223E4CA1481B16652F4899EC545A82032CB05ABEF2BC1CB733CE2DC32FFFEAAEBB52E130996B268DE9198BDD6E61E5C8C30EE5B146F6AFFA7A0F0CAE678C08C7134C1406204C7F48E2471B0C54D88B55529BEE491BB39E58B8BC19B3EA858C2002F127958119BBEB50C46EFF8B17B1767289F2AE39154E04DC39960CCD156561F8D13B102A87D188E937135274DB96AA56A19B72B6663CDEE6FF5D923C38F5D48F4CED0A36035A336DA5002F385441D6D542DF726251A99A01B1C25108E63CC16880C824AB565A7C330CE6414F39471E4D8B0FE0175404AC23A3BFDA769E2AAB5E47BA62BC994AE76CB17C411E157F394B10E9E3C61C9E7B9B2EE791
38BD42EB24B6783033989BF7CA965F9F20FF6E0EA56A8BF3DEA2BD6C6A932BDD435239CA67553C65297A2E0292C825BCF8271F15236F955A42E4B8ACE0659687B35512506C700956AC476F7C32EB6810D60FC48EA72BB7D57CBFCE55536551F9356CAFF18CFEE907C4F3BA86CA425BD780BCAA8F5B535E6DA80F5E9B61761A8C69F8D8AAE832F59EA8100DE9F261BC008E569E6970F6C6F667D9A52A9A37
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Light cguidfix
/F1.1/HelveticaNeue-Light renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 93.25 104.5 rc
0.5 98.375 m
9.5 104 l
27.5 104 l
36.5 98.375 l
27.5 92.75 l
9.5 92.75 l
h
0.5 98.375 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -35.5 128.75 cm
144 121.5 m
180 99 l
252 99 l
288 121.5 l
252 144 l
180 144 l
h
144 121.5 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 18.5 98.375 cm
/F1.1[ 14 0 0 -14 0 0]sf
-22.813 -3.4060974 m
(!"#$%&'\(')[ 7.784000 7.518000 2.590000 4.410000 6.734000 4.144000 3.892000 8.554000 0.000000 ] xS
-26.705 14 m
(\)$#*+&#,*)[ 9.590000 4.410000 2.590000 7.518000 7.266000 4.144000 2.590000 7.784000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -35.5 128.75 cm
216 144 m
216 161.10001 l
S
0 i
CM
18.5 86.474998 m
19.25 88.474998 l
17.75 88.474998 l
h
18.5 86.474998 m
f
0 J
0 j
0.25 0 0 -0.25 -35.5 128.75 cm
216 169.10001 m
219 161.10001 l
213 161.10001 l
h
216 169.10001 m
S
/Cs2 SC
0 sc
0.25 0 0 -0.25 31.25 75.75 cm
-46 5.2969513 m
(*-)[ 7.518000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
7.25 84.650002 m
8.6000004 86 l
28.4 86 l
29.75 84.650002 l
29.75 80.599998 l
28.4 79.25 l
8.6000004 79.25 l
7.25 80.599998 l
h
7.25 84.650002 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -35.5 128.75 cm
171 176.39999 m
176.39999 171 l
255.60001 171 l
261 176.39999 l
261 192.60001 l
255.60001 198 l
176.39999 198 l
171 192.60001 l
h
171 176.39999 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 18.5 82.625 cm
-20.916 5.2969513 m
($.,'/0)[ 4.410000 4.662000 7.784000 3.892000 9.590000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -35.5 128.75 cm
216 198 m
216 224.10001 l
S
0 i
CM
18.5 70.724998 m
19.25 72.724998 l
17.75 72.724998 l
h
18.5 70.724998 m
f
0 J
0 j
0.25 0 0 -0.25 -35.5 128.75 cm
216 232.10001 m
219 224.10001 l
213 224.10001 l
h
216 232.10001 m
S
0.826204 0.99491203 0.72118002 sc
CM
7.25 70.25 m
29.75 70.25 l
29.75 61.25 l
7.25 61.25 l
h
7.25 70.25 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -35.5 128.75 cm
171 234 m
261 234 l
261 270 l
171 270 l
h
171 234 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 18.5 65.75 cm
-39.284 -3.4060974 m
(12%3#4#,*'5,$')[ 8.820000 7.518000 6.734000 8.036000 2.590000 7.266000 2.590000 7.784000 7.518000 3.892000 3.626000 7.784000 4.410000 0.000000 ] xS
-29.82 14 m
(67*&$+-'/8)[ 9.856000 7.266000 7.518000 4.144000 4.410000 7.266000 2.590000 3.892000 9.590000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
2.75 50.450001 m
4.5500002 52.25 l
32.450001 52.25 l
34.25 50.450001 l
34.25 45.049999 l
32.450001 43.25 l
4.5500002 43.25 l
2.75 45.049999 l
h
2.75 50.450001 m
f
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -35.5 128.75 cm
153 313.20001 m
160.2 306 l
271.79999 306 l
279 313.20001 l
279 334.79999 l
271.79999 342 l
160.2 342 l
153 334.79999 l
h
153 313.20001 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 18.5 47.75 cm
-53.417 -3.4060977 m
(9+&7$'/73$#:+&#,*')[ 12.180000 7.266000 4.144000 7.266000 4.410000 3.892000 9.590000 7.266000 8.036000 4.410000 2.590000 6.482000 7.266000 4.144000 2.590000 7.784000 7.518000 0.000000 ] xS
-12.187 14 m
(!7%&)[ 6.230000 7.266000 6.734000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -35.5 128.75 cm
216 270 m
216 296.10001 l
S
0 i
CM
18.5 52.724998 m
19.25 54.724998 l
17.75 54.724998 l
h
18.5 52.724998 m
f
0 J
0 j
0.25 0 0 -0.25 -35.5 128.75 cm
216 304.10001 m
219 296.10001 l
213 296.10001 l
h
216 304.10001 m
S
0.40784314 0.73725492 0.21176471 sc
CM
7.25 29.75 m
29.75 29.75 l
29.75 20.75 l
7.25 20.75 l
h
7.25 29.75 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -35.5 128.75 cm
171 396 m
261 396 l
261 432 l
171 432 l
h
171 396 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 18.5 25.25 cm
-29.82 5.2969513 m
(67*&$+-'/8)[ 9.856000 7.266000 7.518000 4.144000 4.410000 7.266000 2.590000 3.892000 9.590000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -35.5 128.75 cm
216 342 m
216 386.10001 l
S
0 i
CM
18.5 30.225 m
19.25 32.224998 l
17.75 32.224998 l
h
18.5 30.225 m
f
0 J
0 j
0.25 0 0 -0.25 -35.5 128.75 cm
216 394.10001 m
219 386.10001 l
213 386.10001 l
h
216 394.10001 m
S
/Cs2 SC
0 sc
0.25 0 0 -0.25 34.25 37.625 cm
-58 -3.4060974 m
($7%3,*%7'&,')[ 4.158000 7.266000 6.734000 8.036000 7.784000 7.518000 6.734000 7.266000 3.892000 4.144000 7.784000 0.000000 ] xS
-58 14 m
(7;,<7*,2%'=/>)[ 7.266000 6.734000 7.784000 7.784000 7.266000 7.518000 7.784000 7.518000 6.734000 3.892000 8.820000 9.590000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -35.5 128.75 cm
279 324 m
413.10001 324 l
S
0 i
CM
69.775002 47.75 m
67.775002 48.5 l
67.775002 47 l
h
69.775002 47.75 m
f
0 J
0 j
0.25 0 0 -0.25 -35.5 128.75 cm
421.10001 324 m
413.10001 321 l
413.10001 327 l
h
421.10001 324 m
S
/Cs2 SC
0 sc
0.25 0 0 -0.25 52.246513 47.75 cm
-59.146751 -3.4060974 m
(*,'$7%3,*%7'&,')[ 7.518000 7.784000 3.892000 4.158000 7.266000 6.734000 8.036000 7.784000 7.518000 6.734000 7.266000 3.892000 4.144000 7.784000 0.000000 ] xS
-59.146751 14 m
(7;,<7*,2%'=/>)[ 7.266000 6.734000 7.784000 7.784000 7.266000 7.518000 7.784000 7.518000 6.734000 3.892000 8.820000 9.590000 0.000000 ] xS
/Cs1 SC
0.40784299 0.73725498 0.21176501 sc
CM
70.25 52.25 m
92.75 52.25 l
92.75 43.25 l
70.25 43.25 l
h
70.25 52.25 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -35.5 128.75 cm
423 306 m
513 306 l
513 342 l
423 342 l
h
423 306 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 81.5 47.75 cm
-38.521 -3.4060974 m
(?73"$,<7*#4')[ 9.856000 7.266000 8.036000 7.518000 4.158000 7.784000 7.784000 7.266000 7.518000 2.590000 7.266000 0.000000 ] xS
-6.349 14 m
(/8)[ 9.590000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
0.5 12 m
2.5 14 l
34.5 14 l
36.5 12 l
36.5 2.5 l
34.5 0.5 l
2.5 0.5 l
0.5 2.5 l
h
0.5 12 m
f
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -35.5 128.75 cm
144 467 m
152 459 l
280 459 l
288 467 l
288 505 l
280 513 l
152 513 l
144 505 l
h
144 467 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 18.5 7.25 cm
-35.273003 -12.109146 m
(@:+-2+&7'5,$')[ 8.302000 6.482000 7.266000 2.590000 7.518000 7.266000 4.144000 7.266000 3.892000 3.626000 7.784000 4.410000 0.000000 ] xS
-59.766003 5.2969508 m
("A3,&"+-+B#4'&2B,$')[ 7.518000 6.482000 8.036000 7.784000 4.144000 7.518000 7.266000 2.590000 7.266000 11.662000 2.590000 7.266000 3.892000 4.144000 7.518000 11.662000 7.784000 4.410000 0.000000 ] xS
-44.345001 22.703049 m
(\('"7+C'&$+2B+)[ 8.554000 3.892000 7.518000 7.266000 7.266000 8.036000 3.892000 4.144000 4.410000 7.266000 7.518000 11.662000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -35.5 128.75 cm
216 432 m
216 449.10001 l
S
0 i
CM
18.5 14.475 m
19.25 16.475 l
17.75 16.475 l
h
18.5 14.475 m
f
0 J
0 j
0.25 0 0 -0.25 -35.5 128.75 cm
216 457.10001 m
219 449.10001 l
213 449.10001 l
h
216 457.10001 m
S
ep
end
%%Trailer
%%EOF
