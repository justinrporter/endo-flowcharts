%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 490.000000 409.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 123 103
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 123 103
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue-Light
%!FontType1-1.0: HelveticaNeue-Light 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Light def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /u put
dup 35 /s put
dup 36 /p put
dup 37 /i put
dup 38 /c put
dup 39 /o put
dup 40 /n put
dup 41 /space put
dup 42 /B put
dup 43 /e put
dup 44 /D put
dup 45 /z put
dup 46 /C put
dup 47 /a put
dup 48 /l put
dup 49 /m put
dup 50 /H put
dup 51 /y put
dup 52 /r put
dup 53 /hyphen put
dup 54 /t put
dup 55 /h put
dup 56 /d put
dup 57 /A put
dup 58 /k put
dup 59 /P put
dup 60 /O put
dup 61 /v put
dup 62 /x put
dup 63 /f put
dup 64 /comma put
dup 65 /fi put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -430 1 index div -305 2 index div 1987 3 index div 1163 5 -1 roll div]cvx def
/sfnts [<








01BA00030003000C2B01BF000400510043003400250017000000122BBF000500580048003800280018000000122B00BF0002005F004E003D002C001A000000122BBF00030068005500430030001D000000122B00BA0006000500112BB8000120457D691844B800002B000000
00>] def
/CharStrings 35 dict dup begin
/.notdef 0 def
/space 1 def
/comma 2 def
/hyphen 3 def
/A 4 def
/B 5 def
/C 6 def
/D 7 def
/H 8 def
/O 9 def
/P 10 def
/S 11 def
/a 12 def
/c 13 def
/d 14 def
/e 15 def
/f 16 def
/h 17 def
/i 18 def
/k 19 def
/l 20 def
/m 21 def
/n 22 def
/o 23 def
/p 24 def
/r 25 def
/s 26 def
/t 27 def
/u 28 def
/v 29 def
/x 30 def
/y 31 def
/z 32 def
/fi 33 def
/A.short01 34 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-430 -305 1987 1163}def
/UniqueID 4428012 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C93142184C9D9AF35B09B9B2CFE320E80E6018C5839BB77E6DFC734C68F0B48FFE4508992C3EED356EFA25DB46F07BD874FB95CEBE8BF360869244E219E26C36AF27768FE942114CEDA63EBA03526DBD6F25AB081A29E9F4FF022288A8F86CB19C7DF84628B58439B9971E66CBA7CA94D9FD272CE022E1A2E94EB002B9E509C280198C9B0795B39A19257DE04B51C85B2F0216F22556F2916EA565B83AB0D89B16B7E9DBB4AEBEF34752B36BE21B732C15AD14A9365E94C663C98253E86CCB7A50D5A60F01C02A7E1C631EF0B2AEF5106481849016F54D38796B71E7D90E940E22BD424DB4C6C43BA88D7CAC17107C8B5DE6696D923DE02F5588C125D3FD36C3FF39B6EC610BD2162F926D9A04899ADD0C1C7799131AABF5B965532BECE9F8F80E432EF7022630C04F1A4D85959BAD97CE325DFDC31BFA2E04A6A54765B44AD8D53AA0C8FFD6C39111EA475DE41CE6C2BDFF81405DFC22339FC64B1E0B257FE094252953C5A5864074914D303E24DE0D559821744473490DB62B47BAD2242FB77C394BAE3EA3C6A196DE6E810CF5F3DAA4034B6AC01E94BC120179ADE3B628B13A8A7BFF4DE8D81898D6A2F3E8EF3FD0211E2A7264DFC8F5212B1A2A8DF80405A1C66000C104D39AB95A33A91A0C243152E87ACC609541918E940217D8AE48369903D2C24737A7D896E211775DBCF2875BCB8EE2105E9720469F4B37FE63EB6E604DEC1D76830D69E5C65C20C945EFE2320AB834EF9A4F0EF10666E70CC3A6E9D63
0D1F7F11BB04B35A07A624B88D0375090E6BE5CBBF30B3A6BCE802AC0BF973081A3B0826FCA641F235C675F5306D92F5F9F1428A7D46A16407E6614A81B7080F78D23FA7AA609849F5B2952165EEBFFB8491D93B6DA4C8F13E79345B9A5DF98C53C067E9D1A82E2FD1308BC689193A87B2BA15C5C2DD8B011AE186AB56A96631377D3163BB9F6511975D7CEB00749A6F411F6173A7E1560CAB7AC64113EAEFC46D33FE8CC7F63BB20C4CF2F7CA87A0A78726EA06E2867494D29BB37EEB6D3FAD76D4527D64A33F0BE72E64306C1091CDAB10C882230E2493415667D2E9940872BB28062E4F5F71579DA55122A32EA11DA1C83C5B1431BBA9F98427D02D92359D294879A987B379C8E3760C170D6557145F9A64756B4B37B3743AE3D3AACFC35FFC8BC62A80BDB1637CEF857E270A3EBE40388F996C0C2907A51D6BF08594E9917A71FFB428057E2997B2ECD3E1532CDB738E775010643154274169A30511B420D5BEA96CCF316892E2643552F3B71CD105E615C0EBE3A0750E2F2A64BAFF39CB9F494E767424309E0CA1D739B2FB3993E01771A2CC87DE7E7964508357C9AE4A33CEA540CF3E543291297109E4A197D40A952532C0B32F842E05EF3FF18B56754ACA802B87F521CAB0987376828CB09C25B79A8BBFAFFD9A6E41398EA4C5722917B9F8EA47B0243E9B4CBC4EC0558380E00C25E87E2205185CBD0918DD3790E549FA60E678DA50672DC6929493F02B670A371D3F21B62EB568D83D417BBE5E98AEB70E3FA8444773855A73CEE2DD72CDFF6D4594CD63A474426FAA1E86AD057D4DCBDF60CBC724FEF8FD1F606E1EFA24B5779029551FD87D21C1A9B215EE7A0FC4CFC53EF103CCB2B18848022FCCE05BEB92E879D0DB90B28DA5849D24345EC2DCBE7FEDFBC6793618E813E005D1C9A2B98D78991AE06085D0AE2F282DE42715C75A166BD013D22B546E4C3B254987924CFB0BF146C5C2566FC9D2141C41572FD018ACEF3D66B1C235C65EF8568D0673FD7A3A2BD38843D5C324D92525FD2FA5260042B9CBA52DDD6945D323A0493A644F35873CB2ADCEA2F21F3CD65C815168DC414D9CEA037EB0A0113AAEE6FE4A839E0FB37531BBFDA4E2429C0F079658821A9263C5E05EEAC553C2F8F54FAD524B72F1AF0B45D41517E7111400AE9CC07EDC31EEFAACFF8DFACE07C4514AED898FA90A9B40472398B565BA1847B0903036F5395C9925420CAAB48FB34A25261ACF8E1B15DBBDD7F10BF7D87DE880B945D4C0605B611ECA5873DD2A96162F51676DF4D52B4BCA1415A6471FE338D193FCC0715DB98E7BC734F411479BD83DFD4BBF988354D8EF3F20F027F6C8D01ED5EEA54856D989F0B5DF9B2B8B3AC27FA38567DB13D3A6655272404554C66FBAD3E449BE346D8273D728DDDEA4C3D20737C6A0B1E58AED90986955829321E7493DE6A4
7670A6C73398B810C322F5CBF577F1F7C4538D84DA29FADC7171ECB5A52BBC3EB690934C3F04342EB857CE8EAB69EA461DE636AF9183C7202ED2E72A7E10B1C76338DB466BA731DDFC3164A63B180E11370651EBAD425DFEF68FB5B8D184448ABC4CD8CC12D15C0AEA777B3B6E054A24FE4E50A15D3A30DBC18214689575464117D4D94574C4CF2EC3947BB51CFFDFD833BE9A21ABD017B949828EB846B677C0DF9792657287A159E1C3F88AFBA5A6D172A1C3E78BEDD6A94D2A7BABD8C4C541F0E182AEBAA30D3CFC4402AAAF3F26FB0FE0D98164455BE4BBA6B2BA60FA99CCF2ECD6D8FE8050EF36416578F58B5242AF81E9020F5608EFEB60671E871EF03A948248F294487B50AEC21BD0ACAFEE285CE732F131F9AA654AA33492FE6A92CB5F5BEA5539F23A697BCA845F8C13BF72BB44C61DA56CF875E8520C460CC09B31556C741CA981EB5AEC4411488BBA9268F5CAC12D49D3F9374388EB690FFCA15988BD2E7A298F3745A39AEBB491A2F63F177C15A514B22C48418B4EC0C87D19B741F326660BBDD660BD6176E335A7C3696F46A7F7746F3417419F666C2B25A3DAA488CA745A397C0F1CEBB71690D53500FCDD8CF48127432C50C665524A3BD322D95D8830852291C1300F80C30D773D58E544BF7442EFCB8729EDDE9B8FA3D5643DA36159A541DFF1BCEA47C8F22C7BE28CDF951E89C7B14B45E80C0FEC9F2495538C75FF7FA58C5729918E878E33D3D281B8EB1826C27922DB7A44025146735F730D2AF6B013261156BB5E863FAD55AEAE84AFAD8FA00BD7781AEECC70A0BC23B4765AABF8414204CC2A61119EAC474B560A2E0A5F2C1BE2D2960EE65F3482AF2360FB550FBCB8D2FE066BC2A73D88C680BAC0B5C0E66E1FB8ACAE78D70ED53CC5A104AEF939A24CDFF1CBDBDB5B684F34935BCDD5C2F355C523B0D8759BCABAEEB42FAD5CA8976C8FF059D7F5946F2705836A1DE9A34F78ED49BCA1A94D029BCC5A91C2086DCF06D6188239DE9BD34A79CD5520682E7BB4E35B7591A12E6D147AC2274C08DC6098AF557BE74BEA8C405AC1E515C9663B67B7BD54BAF7AB5DD59625F0DC45BD476D865F1C80DDA1CE54D59DAABFA8CBFAAA6CD408742F2789007C8A94B47734C00A373F524E2CA906845FE79573C49605C61815A872AA733D7821CFB5216524F9541E9B9311E367E7B15772D7D26680082AE9D15E3346B918C18FD471C707258F0824E234F260433DE7EC03123FA8A2204BEDB39CFA354D9BA61A867BBA3576E033ECE235FA910D2B8382BDB8F605C37EC66B1CE8F52E4193765DA4A1BC909DCFF01870DA5E07C6A25672C54D43A72BABF47B79F89958DCA278F69DC99AC4028BDD3FDEAA08C0F8307B218F552D721E17CF271D02F5A39F6BAA1AEA396CE8FF714849C803D90F5A6A60407D8209328CF74D885E7CC4320834DA
AAC91DEC17104AD014FDC84B36C59BB7EC5A9E1FB4B20BA8BFD912FFAD79C7A3440385E35BEBA229C498BC7FCB63B766CA18848C6C39DE3356965047E0056279B01E5D1063F69C30A3285190656612979A6538CEFA485C99902C7AE4B7B6041138E7B363078C72830B2039C5E2009933E4CF2BCE4B34FFFDAD68A3083A88F9B7A1AB12C36D60B5CDAE8633FC457FEA2D2053AC8D001FDF97C3434F91AE37FDC130FA123F55865FF94AE0173E67AF4B07FE7A9011D0BE011F255F481BDC60AF176CBE94407EE01B5EBCE0FCE90E4AE098155787EDC5B6BA7FD8093D5FA555526054BC685584F2B47B3EA0D614EB6C9826DB11E2AE77ED58C44066E8420395E2A5DFBC557B8932D6BE560994AFE909C4CE6CAD789E6920D69BD42FE69E1612EAF86EDAA520C7A1FFC09FC3EC47845C02601BE3554794C6BEA0A5AF2DF471907E2EE872AA72E6696C8E5928D755C31CD540E6EA1167D76D2C84D98F11C3E020E12F6BDEF5B5B9E65C3DF6E2625F3A69A41CCCD24FE9F71D754F33D5222DD29C48DA45B4815AD7A7239C04A27AC2CEE3ACAD7DB6D65DA6F6E4E67F75CDEBDBC5C1661E2629F8B672D6014C013BCB8AEE2937D23357CD61CE061DA8D5300898FF4FF06A30523B71EBC1D37717632F03C1DCACD616FF9A3ABA730767C736FCB2E12C290AC5605EBA0CBFD46E1305E77455FE477043764B85A303101156D9D516BCFFA0ECE3915338FBA9B91A15A7ED8FADC203A2DAE78B72705EE242B02297179D883CDB00347BC99DDD61A4A41C634CEDD709B6F5C2743706B1C916D357EA56CD8829C2F4420A2FD0EE11D9EBCDADDA90E89B6C203E1C42830EFA884F4819E95B5D1C79C368206E87BF2C2A5B63FFE313FAF099182A04F0A793DE313E56733C4B7004E34DC358485D5AF8F3C5DED29327C0B48C70D94B1373A213CF0963825FBB1B0C29E09006681F3FDEFCC492E1E3E44AD7BA7143E4713D83C18AA9FB7989282F156DDB57D269B07F4B2555B8E39493EB33327C28A12CE407F1986C9F254BF365121462D672CA5449E67EA900B845F00BE595642C27BDCB62F28654F4404D77FB9384947538FAE75D9B4C76BCA6AC3568C7D1CA6611E3119DF827F879A0227F8DA2CC92A15B87EBCB1C47DF82E731A0DF02A0A784C3023F2352C4600F2FF800F97C04A03B783A89906B6834F5BFA7D55A69AD3F3059E155522527F3D6C3C82B01021959878CA38055611428DB2E24F474D62D5C086601D527FB9AC5BAA49846380C4D2DCEF6E9F56F9C50EC4ABA51083E1F65ACD702753F6520C5CDBF5BD9A1C1BC8D1176A931786785B9660C49741B812D157BEDF9C77B1F29817CDD03924D4DA261BB223CCA3B360EB87316889A087221DF9575E15997F97712B60A5E7B5817A1D0B7A4D00D80FB838059CB3EA137CCF9192983205E2AD5C861852DB69812C486
0C3F231FA2515264CD6A66C94FADB6751E0CBB8FE07305716DDC121EE02550804F1EADE5F672178117B9292E6C1FE374B8AFEDA0271E38DF8E8CA719B6506EA857A6233E2D67CB3993D2156AC8460900593E20392296C92E041E1591B9FDBF400DA3306B41D8912BD91BB1DFFE4456873AC2C6C872C045E3C99770D3492125CB1337248946C75BBAF6EED91D698CDEB1E1DE391369B63789BFED227ED4F9A0FD8DDF32B68F4607D4755ADFEDC6738B986AA3778909623DBA6E9B17A573C8BC58D127576DE13B2B0B980A16C21F3A8693C37AE9687CE29CFDBA2B25044D875A8D044E4C1F4B463E6DA9AFB3DFAC02C8A0FABAF5810AF618AF8F669A4B771EBAC9373490031391E4EE5925877BE715E821C3227EB19FD282652D46AF0691EBF23C23AF98A0B7709A9D9DD9E2F0B0AEECDBBB5673D9FFD3606331E84F57840D29F9082BCC7B0825A0766420C2EDD0A04EA02FFFE9435558C43F5EA73232B5A36FD5E970B681E122164B843717EFF4A1E4F4651053E1E452C85AB64549F977F2CCE605EDD39F4B5F4B35AF64C10CF12951607594EA501690044E351FECACF97471C155B193EDE6B36E8F7F5BA6C517B9D16D6642108005CF79B3AF3A1E42E7E279C588270F335468DB39249A01DE906033FE547E0F6EC049AF6917D3DA7E5EA7F279A6FCE04E6D3DE1E237FD681D95704C52ECC5861BC9C9A3EB165D6CB1E34E6EAEEE50DFB4D2E566F9AC7655E60C3DC04EF3B8D487F9C6DEE8DA35529D9C41D6344FF0BE81A9456AD3895CE9438C44A1799545BFFBCF9E52DD19A488DBDD08628174C46B77DB17F000C2FBAE2E10BB30F69B5147F744A7D771DABBD55ABDF9AB2A6DB25DD45EB079F8FAEF100CF1096CCE96899F449449012AA06596D069D5FCDB6FAB51C6FA4A32D5E988F6247E19DE3EFCEC970E4E1148E3D54306A0CF3F5C1FABDA8C4DCD5ED4DDAEC4E561C3B1481CE57EA476C78CE69D8BFCC2AF72A440C87B37DA655582BD2782EE45ACBB59F4AFA1D0D4670CDF862D3D0C21E3F9C0C36C3BC8E59A4C93CC772113721AC3DB4C97FF72523807D9B36B52BE370A7A94F4CF4B25586823C4819CFCEFADCCF337CD7E8342936A06AF168B72B9CD7E8BBB8857C94FE5AE98C6385E5B50409F7341AF02D690C7778B29675378294575C4D65027B48B5BAB044B207871922472DB444CAF3D37C60D651DAF668533BDCFF64F893B32E0C96D595AC38783833D3F1C0793F99157975863AB9FDF3C4B1535D528BE671F1EC5D3B42D4E587EED985DE8F33C7711F9F848DB6A0433A8FD2FC95E7900418A823461B1E1FA79FB6E01F89EE27CFDDFCCB29DE6A27F73E1DC4D6E975AE1AF170884C7F4291BF3064534019A340B8B53C23B26945D433AAA2C03EC2F7C215FF430C4F77E7BCA6A6866C7FC5A9DBB52073F3BB24D8FA8DD54FAB5472E242EA1

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Light cguidfix
/F1.1/HelveticaNeue-Light renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 122.5 102.25 rc
0.5 96.125 m
9.5 101.75 l
27.5 101.75 l
36.5 96.125 l
27.5 90.5 l
9.5 90.5 l
h
0.5 96.125 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
261 76.5 m
297 54 l
369 54 l
405 76.5 l
369 99 l
297 99 l
h
261 76.5 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 18.5 96.125 cm
/F1.1[ 14 0 0 -14 0 0]sf
-29.427999 -3.4060974 m
(!"#$%&%'\(\))[ 8.820000 7.518000 6.734000 8.036000 2.590000 7.266000 2.590000 7.784000 7.518000 0.000000 ] xS
-25.934999 14 m
(*'\(+\),-)[ 9.338000 7.784000 7.518000 7.266000 3.892000 9.590000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
7.25 77.449997 m
9.0500002 79.25 l
27.950001 79.25 l
29.75 77.449997 l
29.75 72.050003 l
27.950001 70.25 l
9.0500002 70.25 l
7.25 72.050003 l
h
7.25 77.449997 m
f
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
288 151.2 m
295.20001 144 l
370.79999 144 l
378 151.2 l
378 172.8 l
370.79999 180 l
295.20001 180 l
288 172.8 l
h
288 151.2 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 18.5 74.75 cm
-24.374001 5.2969513 m
(./0&%"1)[ 9.856000 7.266000 2.590000 7.266000 2.590000 7.518000 0.000000 ] xS
/Cs1 SC
0.40784299 0.73725498 0.21176501 sc
CM
54.5 79.25 m
86 79.25 l
86 70.25 l
54.5 70.25 l
h
54.5 79.25 m
f
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
477 144 m
603 144 l
603 180 l
477 180 l
h
477 144 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 70.25 74.75 cm
-20.23 -3.4060974 m
(23$+45)[ 9.856000 6.482000 8.036000 7.266000 3.640000 0.000000 ] xS
-44.338001 14 m
($/4/6734'%8%#1)[ 8.036000 7.266000 4.410000 7.266000 4.144000 7.518000 6.482000 4.158000 7.784000 2.590000 8.036000 2.590000 6.734000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
378 162 m
436.5 162 l
467.10001 162 l
S
0 i
CM
54.025002 74.75 m
52.025002 75.5 l
52.025002 74 l
h
54.025002 74.75 m
f
0 J
0 j
0.25 0 0 -0.25 -64.75 115.25 cm
475.10001 162 m
467.10001 159 l
467.10001 165 l
h
475.10001 162 m
S
1 1 1 sc
CM
5 57.200001 m
6.8000002 59 l
30.200001 59 l
32 57.200001 l
32 51.799999 l
30.200001 50 l
6.8000002 50 l
5 51.799999 l
h
5 57.200001 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
279 232.2 m
286.20001 225 l
379.79999 225 l
387 232.2 l
387 253.8 l
379.79999 261 l
286.20001 261 l
279 253.8 l
h
279 232.2 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 18.5 54.5 cm
-22.82 -3.4060977 m
(90:/0%\(+\))[ 8.820000 2.590000 7.000000 7.266000 2.590000 2.590000 7.518000 7.266000 0.000000 ] xS
-39.542999 14 m
(;7'#$7/6/#+)[ 8.820000 7.518000 7.784000 6.734000 8.036000 7.518000 7.266000 4.144000 7.266000 6.734000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
333 180 m
333 202.5 l
333 215.10001 l
S
0 i
CM
18.5 59.474998 m
19.25 61.474998 l
17.75 61.474998 l
h
18.5 59.474998 m
f
0 J
0 j
0.25 0 0 -0.25 -64.75 115.25 cm
333 223.10001 m
336 215.10001 l
330 215.10001 l
h
333 223.10001 m
S
0.40784299 0.73725498 0.21176501 sc
CM
54.5 59 m
86 59 l
86 50 l
54.5 50 l
h
54.5 59 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
477 225 m
603 225 l
603 261 l
477 261 l
h
477 225 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 70.25 54.5 cm
-41.104 5.2969513 m
(<#6+'1/0/&%/)[ 10.374000 6.734000 4.144000 7.266000 7.784000 11.662000 7.266000 2.590000 7.266000 7.266000 2.590000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
387 243 m
436.5 243 l
467.10001 243 l
S
0 i
CM
54.025002 54.5 m
52.025002 55.25 l
52.025002 53.75 l
h
54.025002 54.5 m
f
0 J
0 j
0.25 0 0 -0.25 -64.75 115.25 cm
475.10001 243 m
467.10001 240 l
467.10001 246 l
h
475.10001 243 m
S
/Cs2 SC
0 sc
0.25 0 0 -0.25 41.69043 74.75 cm
-25.158001 -3.2030487 m
(+0+=/6+8)[ 7.266000 2.590000 7.266000 6.482000 7.266000 4.144000 7.266000 0.000000 ] xS
0.25 0 0 -0.25 42.321289 54.5 cm
-25.158001 -3.2030487 m
(+0+=/6+8)[ 7.266000 2.590000 7.266000 6.482000 7.266000 4.144000 7.266000 0.000000 ] xS
0.25 0 0 -0.25 29.75 64.625 cm
-40 5.2969513 m
(\('41/0)[ 7.518000 7.784000 4.410000 11.662000 7.266000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
5 36.950001 m
6.8000002 38.75 l
30.200001 38.75 l
32 36.950001 l
32 31.549999 l
30.200001 29.75 l
6.8000002 29.75 l
5 31.549999 l
h
5 36.950001 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
279 313.20001 m
286.20001 306 l
379.79999 306 l
387 313.20001 l
387 334.79999 l
379.79999 342 l
286.20001 342 l
279 334.79999 l
h
279 313.20001 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 18.5 34.25 cm
-36.428001 5.2969513 m
(;7'#$7'4"#)[ 8.820000 7.518000 7.784000 6.734000 8.036000 7.518000 7.784000 4.410000 7.518000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
333 261 m
333 283.5 l
333 296.10001 l
S
0 i
CM
18.5 39.224998 m
19.25 41.224998 l
17.75 41.224998 l
h
18.5 39.224998 m
f
0 J
0 j
0.25 0 0 -0.25 -64.75 115.25 cm
333 304.10001 m
336 296.10001 l
330 296.10001 l
h
333 304.10001 m
S
0.40784299 0.73725498 0.21176501 sc
CM
2.75 18.5 m
34.25 18.5 l
34.25 9.5 l
2.75 9.5 l
h
2.75 18.5 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
270 387 m
396 387 l
396 423 l
270 423 l
h
270 387 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 18.5 14 cm
-40.061001 5.2969513 m
(<#6+'$'4'#%#)[ 10.374000 6.734000 4.144000 7.266000 7.784000 8.036000 7.784000 4.158000 7.784000 6.734000 2.590000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
333 342 m
333 364.5 l
333 377.10001 l
S
0 i
CM
18.5 18.975 m
19.25 20.975 l
17.75 20.975 l
h
18.5 18.975 m
f
0 J
0 j
0.25 0 0 -0.25 -64.75 115.25 cm
333 385.10001 m
336 377.10001 l
330 377.10001 l
h
333 385.10001 m
S
/Cs2 SC
0 sc
0.25 0 0 -0.25 29.75 25.25 cm
-40 5.2969513 m
(\('41/0)[ 7.518000 7.784000 4.410000 11.662000 7.266000 0.000000 ] xS
0.25 0 0 -0.25 29.75 44.375 cm
-40 5.2969513 m
(\('41/0)[ 7.518000 7.784000 4.410000 11.662000 7.266000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
0.5 9.5 m
36.5 9.5 l
36.5 0.5 l
0.5 0.5 l
h
0.5 9.5 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
387 423 m
405 423 l
405 459 l
387 459 l
279 459 m
261 459 l
261 423 l
279 423 l
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 18.5 5 cm
-67 -3.4060974 m
(&7+&:\)7>\)?'4\)#6+4'%8#@\))[ 7.266000 7.518000 7.266000 7.266000 7.000000 3.892000 7.518000 6.734000 3.892000 3.626000 7.784000 4.410000 3.892000 6.734000 4.144000 7.266000 4.158000 7.784000 2.590000 8.036000 6.734000 3.892000 0.000000 ] xS
-67 14 m
(?/17>)[ 3.626000 7.266000 11.662000 7.518000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
86 59 m
122 59 l
122 50 l
86 50 l
h
86 59 m
f
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -64.75 115.25 cm
729 225 m
747 225 l
747 261 l
729 261 l
621 261 m
603 261 l
603 225 l
621 225 l
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 104 54.5 cm
-67 -3.4060974 m
(&7+&:\)7>\)?'4\)=%6\),\))[ 7.266000 7.518000 7.266000 7.266000 7.000000 3.892000 7.518000 6.734000 3.892000 3.626000 7.784000 4.410000 3.892000 6.482000 2.590000 4.144000 3.892000 9.590000 0.000000 ] xS
-67 14 m
(8+A&%+\(&3)[ 8.036000 7.266000 6.216000 7.266000 2.590000 7.266000 7.518000 7.266000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
