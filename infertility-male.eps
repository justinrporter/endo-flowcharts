%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 374.000000 409.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 94 103
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 94 103
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue-Light
%!FontType1-1.0: HelveticaNeue-Light 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Light def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /a put
dup 35 /l put
dup 36 /e put
dup 37 /space put
dup 38 /I put
dup 39 /n put
dup 40 /f put
dup 41 /r put
dup 42 /t put
dup 43 /i put
dup 44 /y put
dup 45 /P put
dup 46 /s put
dup 47 /m put
dup 48 /T put
dup 49 /o put
dup 50 /w put
dup 51 /L put
dup 52 /H put
dup 53 /F put
dup 54 /S put
dup 55 /v put
dup 56 /d put
dup 57 /K put
dup 58 /p put
dup 59 /quoteright put
dup 60 /four put
dup 61 /seven put
dup 62 /comma put
dup 63 /X put
dup 64 /Y put
dup 65 /W put
dup 66 /k put
dup 67 /u put
dup 68 /A put
dup 69 /g put
dup 70 /E put
dup 71 /x put
dup 72 /c put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -430 1 index div -305 2 index div 1987 3 index div 1163 5 -1 roll div]cvx def
/sfnts [<

5823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800182C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800192C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8001A2C2020456944B001602020457D691844B001602DB8001B2CB8001A2A2DB8001C2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8001D2C4B535845441B2121592D00000000020032000001C2020000030007000B00B800052FB800042F3031252111212511211101BAFE800180FE7801900801F008FE0002000000000001005DFF7800B5006A000E001FBA0000000100032BB8000110B80008D0B800082F00B800092FB800002F303137231533160E0207153E0335B5542A01050C120C1621160B6A6A0B1D1B16042B061C252B1600000002001E0000020402BC0003000E004DBA000C000000032BB8000C10B8000010B80006D0B8000C10B80008D000B800072FB8000D2FBA0001000500032BB8000110BA00030007000D111239B8000510B80009D0B8000110B8000BD030312521013301152115333533352311230161FEF6010802FEBD01433A696939E3017DFE8B3DAEAE3501D9000000010033000001F502B3000E001FBA0008000700032BB800081000B800072FBA0000000100032BB800001030311315210E0307333E0337353301834967452506440641575C2102B33A5398979E597ACB9F73223A0002FFFA0000027D02CA0002000A001B00B800032FB800042FB800082FBA0000000600032BB800001030311B020301333721173301AD8F8AADFEE1485601455749FEE80118016EFE9201B2FD36DEDE02CA000000000100480000023A02CA000B0033BA0009000000032BB8000910B80004D000BA0004000100032BBA0000000900032BB8000010BA0008000500032BB800081030311311213521112135211121354801F2FE52018EFE7201A902CAFD363A011A3A01023A00000100480000020D02CA0009002FBA0007000000032BB8000710B80002D000B800012FBA0000000700032BB8000010BA0006000300032BB800061030311311331121352111213548440156FEAA018102CAFD3601543A01023A000000000100480000027802CA000B0047BA000B000000032BB8000B10BA0006000500032BB8000610B8000B10B80002D0B8000510B80008D000B800002FB800072FB800012FB800052FBA000A000300032BB8000A103031131133112111331123112111484401A84444FE
5802CAFD36015AFEA602CAFECA0136000001004D0000009102CA00030017BA0003000000032BB800031000B800012FB800002F3031131133114D4402CAFD3602CA000000000100480000029602CA000B002DBA000B000000032BB8000B10B80002D000B800012FB800052FB800002FB800082FBA000A000100001112393031131133353701330901230111484489012958FEB2013F5CFE6102CAFD36F57FFE8C01A30127FE800180000100480000021C02CA0005001FBA0005000000032BB800051000B800002FBA0004000100032BB800041030311311213521114801D4FE7002CAFD363A02900000010046000002F102CA000E00C8B800142BB8000F2FB800052FB8000F10B8000DD0B8000D2FB8000510B900040018F4BA0001000D0004111239B8000510B80007D0B800072FB8000D10B9000C0018F4B8000AD0B8000A2FB8000410B80010DC00B800104558B800002F1BB9000000203E59B800104558B800022F1BB9000200203E59B800104558B800042F1BB90004001A3E59B800104558B800082F1BB90008001A3E59B800104558B8000C2F1BB9000C001A3E59BA000100040000111239BA000700040000111239BA000B0004000011123930311B02331123112303230323112311AAEDF6644402F440EB024402CAFD8E0272FD360269FD970269FD9702CA000000000200480000025902CA000800170089B800192FBA0001000900032BB8000110B8001910B80012DCB80005DC410500DA000500EA000500025D411B0009000500190005002900050039000500490005005900050069000500790005008900050099000500A9000500B9000500C90005000D5DB8000110B8000BD000B8000A2FBA0009000100032BB8000910BA0000000C00032BB800001030311311333216151406230111331133323E0235342E02238CEA47585847FED244F9304E381E1E384E30016C0124484A4A48015EFD3601321B354C30304C351B0000010021FFF2025202D9004100A1BA0000000100032BBA0023002200032BB8002310BA003800220023111239B800382F410500DA003800EA003800025D411B0009003800190038002900380039003800490038005900380069003800790038008900380099003800A9003800B9003800C90038000D5DB8000DDCBA002D00010000111239B8002D2FB80018DCB8000D10B80043DC00BA003D000600032BB8003D10BA0028001D00032BB800281030313723061E0233323E0435342E022F012E0335343E0233321E021733342E0223220E0215141E021F011E0315140E0223222E02684403294C6C3F3F5A3D2313051D334326AE16271E111E3141232645352102442B4860354B6037141B2C3B1F9F19342B1B2639421C31563F24EB425E3C1D17252E2D280C2C3E2B1D0A2B05101A25192836210F15293D293753381C
2B3E461A2A3A2818082706131E2C1E27372310132C4A00000001FFFC0000023102CA00070027BA0005000200032BB800051000B800032FBA0000000100032BB8000010B8000110B80005D03031031533113311333504F844F902CA3AFD7002903A000000000100000000038802CA000F003500B800012FB800052FB800002FB800072FB8000B2FBA000400010000111239BA000A00010000111239BA000E00010000111239303111133313331333132303230323032303C64AB402B548C544A302AF55AE02A202CAFD36027FFD8102CAFD8F0271FD8F02710001FFF50000024802CA000B002700B800022FB800052FB800002FB800082FBA000400020000111239BA000A0002000011123930311B0101331B01330113230B0103F2FF004CDCD952FEFEF44CD1CA02CAFEA6FE90013BFEC5016E015CFED5012B0000000001FFF70000026D02CA0008002FBA0003000000032BB8000310BA00060000000311123900B800042FB800072FB800012FBA00060001000411123930310111331101230B0123010F44011A51EAEB500126FEDA012601A4FE96016A0000020020FFF201FE02130035004900A7BA0041001300032BB8004110BA002C000900032BB8002C10411B0006004100160041002600410036004100460041005600410066004100760041008600410096004100A6004100B6004100C60041000D5D410500D5004100E5004100025DBA000000130041111239B800002FB80001DCB8000910B8001ED0B8001E2FB8000910B80036D0B8002C10B8004BDC00BA003C001800032BB8003C10BA0031000400032BB8003110303113333E0133321E0215140E02070E0315141E0233323E023733141E0233323637350623223511342E0223220E020515140E0223222E0235343E02373E0137363F024C3C1C3125150B141E1433634F301B2F3F2426372B23110205101D180D110B090B25223644222D4A3720014D1D314224162A20132D4655280D220601663F3909182920151A0F0602060D203D36273925110E1A27191421180D020235042601123441240D142A427952263C2A160E1B25182629160B07020A0B00000000010022FFF201EB02130023006DBA001C000900032BB8001C10411B0006001C0016001C0026001C0036001C0046001C0056001C0066001C0076001C0086001C0096001C00A6001C00B6001C00C6001C000D5D410500D5001C00E5001C00025D00BA0017000E00032BB8001710BA0004002100032BB8000410303101332E0123220E0215141E0233323637230E0323222E0235343E0233321601A83F0B73533B5B3E20203E5B3B58700D3F031A28341D2D442D17172D442D3F46016259582C4A633838634A2B695E20362716263E4F29294F3E264200000000020026FFF2020202CA001A002E00BFB8002F2FBA0001000200032B

1D293B261222405C4A23394A27284D3C25263E4C26274A39230000000002003D0000007C02CA000300070027BA0003000000032BB8000310B8000010B80004D0B8000310B80006D000B800052FB800002F303113153335071133113D3F3F3F02CA6565C6FDFC02040001003C000001FC02CA000B0033BA000B000000032BB8000B10B80002D000B800012FB800052FB800002FBA000800010000111239BA000A0001000011123930311311333537133303372305113C3F66CC4FEBDC54FEE202CAFD36C455FEE70145BFFA01C00000000001003D0000007C02CA00030017BA0003000000032BB800031000B800012FB800002F3031131133113D3F02CAFD3602CA0000000001003C000003050213002800D1BA0003000000032BB8000310B8000DDC410300BF000D00015D4103008F000D00015D410300EF000D00015D41050010000D0020000D00025D41030050000D00015DB80010DCB80018DC410300EF001800015D4103008F001800015D410300BF001800015D4105001000180020001800025D41030050001800015DB8001BDCBA0020000D0010111239B8000310B80026D0B800262FBA002700000003111239B8001B10B8002ADC00B800012FB8000E2FB800192FBA0023000800032BB8002310B8000810B80015D0B8002310B8001DD0303113113311343E0233321E0215113311343E023332161511331134232206072E012322060723353C3F12253B281E2A190B3F0D20362944363FAB335A170E53333F5119030204FDFC01202945331D14232F1AFEA201242443341F4340FEA5015EB53233333236305700000001003B000001DE0213001A0043BA001A000000032BB8001A10BA0010000D00032BB8001010B8001A10B80002D0B8001A10B80018D0B800182F00B800012FB8000E2FBA0015000800032BB80015103031131133113E0333321E0215113311342E022322060723353B3F0117293B2626331E0C3F122C4936375C12020204FDFC012D26412F1B182A3921FEBE014C2E4A331C392F5900000000020022FFF2020A02130013002700C7B800282FB800292FB80023DCB80005DC410500DA000500EA000500025D411B0009000500190005002900050039000500490005005900050069000500790005008900050099000500A9000500B9000500C90005000D5DB8002810B80019D0B800192FB8000FDC411B0006000F0016000F0026000F0036000F0046000F0056000F0066000F0076000F0086000F0096000F00A6000F00B6000F00C6000F000D5D410500D5000F00E5000F00025D00BA000A001E00032BB8000A10BA0014000000032BB8001410303101321E0215140E0223222E0235343E0237220E0215141E0233323E0235342E0201162D442D17172D442D2D442D17172D442D3B5B3E20203E5B3B3B5B3E20203E5B01DE263E



00>] def
/CharStrings 42 dict dup begin
/.notdef 0 def
/space 1 def
/comma 2 def
/four 3 def
/seven 4 def
/A 5 def
/E 6 def
/F 7 def
/H 8 def
/I 9 def
/K 10 def
/L 11 def
/M 12 def
/P 13 def
/S 14 def
/T 15 def
/W 16 def
/X 17 def
/Y 18 def
/a 19 def
/c 20 def
/d 21 def
/e 22 def
/f 23 def
/g 24 def
/i 25 def
/k 26 def
/l 27 def
/m 28 def
/n 29 def
/o 30 def
/p 31 def
/r 32 def
/s 33 def
/t 34 def
/u 35 def
/v 36 def
/w 37 def
/x 38 def
/y 39 def
/quoteright 40 def
/A.short01 41 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-430 -305 1987 1163}def
/UniqueID 4428012 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94DD8F68E7C9E6CE89571C79E22E977A5B42C931CC2176483889C4D7E8FFE2D71D2B36F00C97DB66385B5BF338B4A0D28BCA3D290B53E3DD19B189CC0753EC08E43A3A0AA3516DFA35479902EDD611084A77B19C6DEBCE71F84CCBF04329C4FE22856472DF11C713B41C95FC1422F6FF837517D40B14C18AD35F77CD046DF3FCDA504862C7B9CE5591542A5031B8DF1EDEFDE5F704E6985DD8B496C0447227206E88AD1A2777E9D2BBDC612C24F8EEA5E2AF164D38E9C1046095478B33CE020AED7379EA4299911ADE66D841E45D03F4CD442FA51735112BEBF84C1938C17916BAF336C1E4AA7F9153130BE5D3D2132EE70AF0D4301EFC08B97A02754A765236F58EA398B35479C7901A38FE2E88AB02C45C453594B4DBF12F0440F79F8680AC835D4635D10942C969AA11BC9AB99E57F926B4E9511BD83A1CBF631BEE80C29CD3A7FF284BEAA068B3801C027D370BDF2AEB2B5081CDE7FBCA1BC48EEE2B864B7A45FBBB4D85356625BF02839BED5059CBE0BA99C85AAF5218A76CCC4EE4A1F0C58E0FF900421A7EAE434BD2971B09F9836B87F0DA03FEA69BBF374B6C3955BA51DFBDEC235C4F80F45C31B518A84AAF39304834461CA4FB229E16DE8D68FC9147773975FC338438002E6DC0D472FC246175A2FF57B6A2ABE2633D92476C2366D9897A3FE8918C7954172E4EC7F23AA30968438A7F89B9A6EB3085C53E3750ACD078847D5C9A6D07C227F42A22E87ADF927A0A1A7D6128A3114EEE4FF002CDDCC2
D53ECD53D17674209854F51D537748702A91A1D848779B6EFF0D576934D3965C891863B5E33881BFF68CFBE99E7D70DCE45BDAE623606A79E6E427B01DDA656F2563DA350A36C29330CB864C14C0AFDE14A129D063850D4B04C49675BAA310D511AE773291113569E9EFB53B7D57466FFF9584B3E94B4F412D189440E75E8FB70A6D501CD3C29C70200BC5C3F7794B7E43A812D16FF54A81A38AD122C321CB4BDBBAFD075C86CFD689520BCC134904CCF284EA3C2C5E409D8FFFCEFDFF4D3F8457B612B26D5A53ADC35CB22588159ADE262B924DF20C785A07F279B1B13D9039A341D866688EE6CAB2D227A9C870668E10AC5369351FD4B8C87A77E994696DF566F9DF54A7CF699AA0F2BF16A616C75C5DA3C222E8F0A2403BE7A2D22734D447CD4FF075C76C6C061A8C01C56299C0C5DD71714525CAC8BE452380F608A211E9E4A8461AB5148DA76790C4899CAA5102705B2B57BA81EC943FCE7353BC76EB7E9F5E6D5B288E26CDF2996D5A4D0366E3A37C3EC62D3648C954C9DDA5CC7345978454037E697300575B807A3D303750E6A98EF699E870FDD77D0538FAC3231B6E4C3EE101A31C5B26E3F9AFBCC5DA2BFF237DFA6261B9A140FA58FFE877739AD3454F96B1E5FA6AF27C67CD558F92AE39D2CCE5BB8B8FF58F4F8698A47BD8B06C94968F5E1A376E4D85DAAB8FC4665AC8B5419F266631FA6463251C42F3A2A44BE2F1795D15B0B00E294DE81F64357269EF954B730D26EB55796BDF7574D550A7B6EB7A89F13F40C097F942330911A9BF0589908DF5440EA518E60A631C201E60C20495162EEEE5D8528E9A40068621B8836CFF65B6BA09423F4263D5EE8325900840EC3BC7D68C1768CA0D1B80F80FFA2AF7BB6E172FCCD30E4725385C07DDD4850A05154A402EDC7022AA74D354F0FCA82AF3DE95A768CA28369CE6AF6AE3AD45633A326D650D58280F615F7326EAC8D602F834D07D3698920A0D0831B09FBA67255EB9211EBC74A500E7A8415CE26A6F532099718448D697BCA039BA9F5BCC9C79D17D23BCC54C1C3E67CE156261D636042890F32339CBEF0F7D26B928385B448D166220E4E7CE065EA9F395D8BFBFE46FFBACEDB01ECF17C8A1933E6495673B0E5C96D5E2980762B59E90FD6ABBD6233BFDA5BE64B303C258D494DA465B6526B198056532A4BFBB4A1AF560FCA9B5E64CC086FDC05DA587C1E0ACEFF2A4C388F89246F0E69F05340E13ACAE8837E501E0E75987E5E7248671413B1C3081989F1F1ED9608D38A918B403AB3C6A88499DC1C5477FB0AFFA426C561142408C8CA902B4F598BA6463C44DEB29BCD29A1AEE4ADE0482A422D7A85BE51C9A376DAE79B268258522CBBF405963E5E96964799D9B978D2A406F9FB7785809E417DE003E3C76973422300749E03E879C5C1645081044CF1FE169A3341B3389DA1B2729

BE011F255F481BDC60AF176CBE94407EE01B5EBCE0FCE90E4AE098155787EDC5B6BA7FD8093D5FA555526054BC685584F2B47B3EA0D614EB6C9826DB11E2AE77ED58C44066E8420395E2A5DFBC557B8932D6BE560994AFE909C4CE6CAD789E6920D69BD42FE69E1612EAF86EDAA520C7A1FFC09FC3EC47845C02601BE3554794C6BEA0A5AF2DF471907E2EE872AA72E6696C8E5928D755C31CD540E6EA1167D76D2C84D98F11C3E020E12F6BDEF5B5B9E65C3DF6E2625F3A69A41CCCD24FE9F71D754F33D5222DD29C48DA45B4815AD7A7239C04A27AC2CEE3ACAD7DB6D65DA6F6E4E67F75CDEBDBC5C1661E2629F8B672D6014C013BCB8AEE2937D23357CD61CE061DA8D5300898FF4FF06A30523B71EBC1D37717632F03C1DCA394B1E29678863E3AAE0973B1C994F511174DDCB48E63E7E3385D16B8A93B3A0BDC52D294E004CDC2041D0412C1F48ED28E2031F4155F87E90B0A4C6BB0A1072C0B6DEEEFF7546DADCE30CDB3B3ACFD538A72C054E80D9605642B1E3AA82FFD2166064DC7C9D48434578F903A5ED6409A0DF7527E895751AA98AFFE35314992562DE546F284125112465C6A07E72F95A4F8267E9FEDBA8273A8D2419CBEB290DAAF3E64E37DF7893F5C5CBB4C69D9326A210B9E32D00A23C9A4BFC332CEBBEB5ECAAE8CF266A1AD87A7492369F2E91BE239040C7C2D72A8BD4E54EE583FE741C804A7DDC9DBEB90DA7D721C582658143F5DA3617A83CAB31CA554C3CC8FAC464F349F6B2BEF8F6E51141041DC9891D3A371827E0479C666F7DB6E5F1B5A653A97991CFBA5D546EE1BC77F18DC50547E29E138CECD1BF36BE9B6CA4DA152EC4DFF6E3000C13F7F2B95400AAF602D002234041A6843F6D930E0386A00383E902FFE01C53D096F0932F4D03B817B440056C94E1B4B4BB6CBEAE72DE75337185A509B9F5FE26EE6EF90272B179423FD09CFFCD3525EBF56CA80AB4EFA76E228CD2C50C2DD2D87095477EFEDB6D5301B3511C017679689C80F20D8AF75288F92AF2A4C852F1C2E6CDAC2C64C8B8F7F113A63227802E77E505C979B751F4CB4776C325313A35443A72763BC9A27C291BBC1B9DA52BD15CC9B7F39E6737296E5AFEF36B9E510ABC2237B9604E55790EC4A395AB4498A9954F72DF44A80F4502F6F0D2C8C54C983D362FA728DC5A0043AFE8E15332D2DD7214CC0A5515B9811229FB4845BF1F20535BB8F676FDB59B18127EB852E7C2770D326FBD66AB2B0FC320E11AA5A6210D59E875968EEC542EE43666BBF75CFF3066332CB36294CB8CB8DB234644ADCFCBAE1906B601E625069C66BB4C65AD3730E72DE803E999A677CBD731B8A996E3EE6CD072E4A4D56D958EA13947BA1C8956FEB3AE6755A60BAA02B392611E5C948C77BD0CD50A2443002CF894DF8ADC878BE99941E4FB05CCF482E26494EAD75B58FB19E

F9C6CB64DDAB2DD20F738D64E85EA13684577004694826E964BD7323102E44333D8217A442E9F2D3EF0735E71575099C66AEE62B31375B293C72031A53E91A279FAD4185C18515375CF4DC04155AE0D92F030EE5A845B1571E7751909A51C80C048150B4E2F7641240CF3557BE33232F0A65634D9894B2D2301147950CBE479FD83FBDC50DECE17C3A9A578DA9E88B6E2F2503018951AEC98CCFD19236831C7E171737DA82D1155E718731E1509776E481A368D0003D9EE1AA67C6067A9F8CBD2A2C2B1B17B093B790AE3710C97BC5EDCB077A62E5CB2B33F5990BEB58431C00B89B5A5485BBFBA9356233F5A557300E3B69B877B9DDB57F55592B1CAA81A2BF33FE97EA4405F35BAAF1BE958B86E750A1F27CC47974318EC4D7F1DD047E67375E1D1F0EFDC2A6A14399A9DE05DA5DBC13D9A7458DA3A0E4C6A5BFDDC7909393FF311CB5F8C28A157C3737D3B9D3FD048B4A962EA5B87F29760DC80623484C4A4E47AAB98BA9E3ED254D184408EC0AECD9EE3A4D984654365808207CB0348038A2E999BF6631ADAE60946415D780CA13EA049AD7A95E40096314F03174496FEA9B928C08A656B22B65F3C902D7EDBBDE6B457A7E02BDE38CDFD8F32CB36689BE13BB9600CE6032AEA129050A3EC1917E9FE69163EDA7B45E814C25F83B1C6672365EACF240CD3688D3BB7587CB6629DC54E9B082CFB979B4494E49F75BE033F26D6F19893F447E0BB57480C40286F922F3075402EE95E9237BAA6A377734CB0AF0179F2011B70AB6BB8E2C70CF585D39400E3332C0435A484943EBB03A09FC314E7DCA41EDA666B5FCBA02E4B757136AB8A0DB56FC79FFFD6F720DADD161C6C65F539FCD0F9786C065B6C7D7C433319C5AAE32E4D32110FF6AF76532B0CBDD13786AFCF0FB35E50A9AE7535A99889843033625DF49B3959818A71A6C65B8E98A60A4E036C2ED195A03DC671BD0AB8257B37DB2B963E52BEF5ECE1B246DD8D754F14DC9C36AE3A111D0C541BB748B5E3EC2141FC861A975EFC8C37F1AA11AE2D52C52FBD75A74F6B5FD5E1EC3ABC5B17587D8935C074B1B1083E17A844CF6B85B15ECA0608BB9C59BCCE8EB5026925FB07011C932DE2A529768880C7DA85713C63CF59FCC77C1E33591CE6DB11883E4546468224278D792ABB4F973B7D1EC3BE6E4EC65F16180C103A53904EC94F06DF95B4DEA5DACAD50F1B6B880A22FEA57A77A2F56CC67AA9BFFC030525DA4C07EDC568F5F5A0ED8EBE9936DD7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Light cguidfix
/F1.1/HelveticaNeue-Light renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 93.5 102.25 rc
7.5 93.875 m
17.625 101.75 l
37.875 101.75 l
48 93.875 l
37.875 86 l
17.625 86 l
h
7.5 93.875 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -12.75 119.75 cm
81 103.5 m
121.5 72 l
202.5 72 l
243 103.5 l
202.5 135 l
121.5 135 l
h
81 103.5 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 27.75 93.875 cm
/F1.1[ 14 0 0 -14 0 0]sf
-14.308 -3.4060974 m
(!"#$%)[ 11.494000 7.266000 2.590000 7.266000 0.000000 ] xS
-24.233999 14 m
(&'\($\)*+#+*,)[ 3.108000 7.518000 3.626000 7.266000 4.410000 4.144000 2.590000 2.590000 2.590000 4.144000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -12.75 119.75 cm
162 135 m
162 170.10001 l
S
0 i
CM
27.75 75.224998 m
28.5 77.224998 l
27 77.224998 l
h
27.75 75.224998 m
f
0 J
0 j
0.25 0 0 -0.25 -12.75 119.75 cm
162 178.10001 m
165 170.10001 l
159 170.10001 l
h
162 178.10001 m
S
1 1 1 sc
CM
14.25 72.75 m
16.25 74.75 l
39.25 74.75 l
41.25 72.75 l
41.25 63.25 l
39.25 61.25 l
16.25 61.25 l
14.25 63.25 l
h
14.25 72.75 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -12.75 119.75 cm
108 188 m
116 180 l
208 180 l
216 188 l
216 226 l
208 234 l
116 234 l
108 226 l
h
108 188 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 27.75 68 cm
-22.169001 -3.4060977 m
(-#"./"%)[ 8.820000 2.590000 7.266000 6.734000 11.662000 7.266000 0.000000 ] xS
-38.514 14 m
(0$.*1.*$\)1'$)[ 6.230000 7.266000 6.734000 4.144000 7.784000 6.734000 4.144000 7.266000 4.158000 7.784000 7.518000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -12.75 119.75 cm
162 234 m
162 251.10001 l
S
0 i
CM
27.75 54.974998 m
28.5 56.974998 l
27 56.974998 l
h
27.75 54.974998 m
f
0 J
0 j
0.25 0 0 -0.25 -12.75 119.75 cm
162 259.10001 m
165 251.10001 l
159 251.10001 l
h
162 259.10001 m
S
/Cs2 SC
0 sc
0.25 0 0 -0.25 21.375 57.75 cm
-6.2480001 5.2969513 m
(#12)[ 2.590000 7.784000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
16.5 52.700001 m
18.299999 54.5 l
37.200001 54.5 l
39 52.700001 l
39 47.299999 l
37.200001 45.5 l
18.299999 45.5 l
16.5 47.299999 l
h
16.5 52.700001 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -12.75 119.75 cm
117 268.20001 m
124.2 261 l
199.8 261 l
207 268.20001 l
207 289.79999 l
199.8 297 l
124.2 297 l
117 289.79999 l
h
117 268.20001 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 27.75 50 cm
-32.802002 -3.4060977 m
(-#"./"%34%)[ 8.820000 2.590000 7.266000 6.734000 11.662000 7.266000 3.892000 7.518000 9.856000 0.000000 ] xS
-21.140001 14 m
(1\)%564)[ 7.784000 4.410000 3.892000 7.518000 8.820000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -12.75 119.75 cm
207 279 m
287.10001 279 l
S
0 i
CM
61.025002 50 m
59.025002 50.75 l
59.025002 49.25 l
h
61.025002 50 m
f
0 J
0 j
0.25 0 0 -0.25 -12.75 119.75 cm
295.10001 279 m
287.10001 276 l
287.10001 282 l
h
295.10001 279 m
S
/Cs2 SC
0 sc
0.25 0 0 -0.25 51.459259 50 cm
-9.7229996 -3.4060974 m
('1*%)[ 7.518000 7.784000 4.144000 0.000000 ] xS
-25.158001 14 m
($#$7"*$8)[ 7.266000 2.590000 7.266000 6.482000 7.266000 4.144000 7.266000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
16.5 30.200001 m
18.299999 32 l
37.200001 32 l
39 30.200001 l
39 24.799999 l
37.200001 23 l
18.299999 23 l
16.5 24.799999 l
h
16.5 30.200001 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -12.75 119.75 cm
117 358.20001 m
124.2 351 l
199.8 351 l
207 358.20001 l
207 379.79999 l
199.8 387 l
124.2 387 l
117 379.79999 l
h
117 358.20001 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 27.75 27.5 cm
-30.471001 5.2969513 m
(9"\),1*,:$)[ 9.072000 7.266000 4.410000 6.482000 7.784000 4.144000 6.482000 8.036000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -12.75 119.75 cm
162 297 m
162 341.10001 l
S
0 i
CM
27.75 32.474998 m
28.5 34.474998 l
27 34.474998 l
h
27.75 32.474998 m
f
0 J
0 j
0.25 0 0 -0.25 -12.75 119.75 cm
162 349.10001 m
165 341.10001 l
159 341.10001 l
h
162 349.10001 m
S
/Cs2 SC
0 sc
0.25 0 0 -0.25 13.125 39.875 cm
-31.342453 -3.4060974 m
("::\)1:\)+"*$#,%)[ 7.266000 8.036000 8.036000 4.158000 7.784000 8.036000 4.410000 2.590000 7.266000 4.144000 7.266000 2.590000 6.482000 0.000000 ] xS
-3.5944526 14 m
($#$7"*$8)[ 7.266000 2.590000 7.266000 6.482000 7.266000 4.144000 7.266000 0.000000 ] xS
/Cs1 SC
0.40784299 0.73725498 0.21176501 sc
CM
16.5 9.5 m
39 9.5 l
39 0.5 l
16.5 0.5 l
h
16.5 9.5 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -12.75 119.75 cm
117 441 m
207 441 l
207 477 l
117 477 l
h
117 441 m
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 27.75 5 cm
-33.705002 5.2969513 m
(9#$+'\($#*$\);.)[ 9.072000 2.590000 7.266000 2.590000 7.518000 3.626000 7.266000 2.590000 4.144000 7.266000 4.410000 2.338000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
0.25 0 0 -0.25 -12.75 119.75 cm
162 387 m
162 431.10001 l
S
0 i
CM
27.75 9.9750004 m
28.5 11.975 l
27 11.975 l
h
27.75 9.9750004 m
f
0 J
0 j
0.25 0 0 -0.25 -12.75 119.75 cm
162 439.10001 m
165 431.10001 l
159 431.10001 l
h
162 439.10001 m
S
/Cs2 SC
0 sc
0.25 0 0 -0.25 13.680387 17.25 cm
2.6355474 5.2969513 m
(<=>??@)[ 7.784000 7.784000 3.892000 8.036000 8.036000 0.000000 ] xS
/Cs1 SC
0.94901961 0.3764706 0.46666667 sc
CM
61.5 56.75 m
93 56.75 l
93 43.25 l
61.5 43.25 l
h
61.5 56.75 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.25 0 0 -0.25 -12.75 119.75 cm
297 252 m
423 252 l
423 306 l
297 306 l
h
309.60001 252 m
309.60001 306 l
410.39999 306 m
410.39999 252 l
S
/Cs2 SC
0 sc
0 i
0.25 0 0 -0.25 77.25 50 cm
-23.597 -12.109146 m
(A1\)BC:%)[ 12.446000 7.784000 4.410000 7.000000 7.518000 8.036000 0.000000 ] xS
-29.441999 5.2969513 m
(D'8\)1E$'%)[ 8.820000 7.518000 8.036000 4.158000 7.784000 7.784000 7.266000 7.518000 0.000000 ] xS
-21.518 22.703049 m
(FGH$..)[ 8.302000 6.734000 7.266000 7.266000 6.734000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
